apiVersion: v1
data:
  usercode.config: |
    [

        {mw_metrics, [
          {is_enabled, true},
          {subsystems, [erlprometheus]}
        ]},

        {erlprometheus, [
          {host, {0,0,0,0}},
          {port, 9100}
        ]},

        {corezoid_license_client, [
           {driver, "{{ .Values.global.capi.licensepath | default "db" }}" },
           {pgsql, [
               {host, "${POSTGRES_DBHOST}"},
               {user, "${POSTGRES_DBUSER}"},
               {dbname, "settings"},
               {password, "${POSTGRES_DBPWD}"}
           ]},
           {path_to_license, "/ebsmnt/certs/corezoid_license"}
         ]},

        {corezoid_global_stats, [
            {disabled, true}
        ]},

      {ermql, [

      {publish_request, [
      {servers, [
    {{- if hasKey .Values.global "mq_http" }}
      [
        {host, "${MQ_HTTP_HOST}"},
        {port, ${MQ_HTTP_PORT}},
        {username, <<"${MQ_HTTP_USERNAME}">>},
        {password, <<"${MQ_HTTP_PASSWORD}">>},
        {{- if eq .Values.global.mq.tls.enabled true }}
          {ssl, [
            {tls, true}
          ]},
        {{- end }}
        {vhost, <<"${MQ_HTTP_VHOST}">>}
      ]
    {{- else }}
        {{- if eq .Values.global.mq.internal false }}
      [
      {host, "${MQ_HOST}"},
      {port, ${MQ_PORT}},
      {username, <<"${MQ_USERNAME}">>},
      {password, <<"${MQ_PASSWORD}">>},
      {{- if eq .Values.global.mq.tls.enabled true }}
        {ssl, [
          {tls, true}
        ]},
      {{- end }}
      {vhost, <<"${MQ_VHOST}">>}
                ]
          {{- else }}
        [
          {host, "rabbit-service"},
          {port, 5672},
          {username, <<"${MQ_USERNAME}">>},
          {password, <<"${MQ_PASSWORD}">>},
          {vhost, <<"${MQ_VHOST}">>}
      ]
          {{- end }}
          {{- end }}
            ]},
        {queues_count, 1},
        {min_size, 1},
        {max_size, 1},
        {start_size, 1}
        ]},

        {consumer_response, [
            {servers, [
        {{- if hasKey .Values.global "mq_http" }}
          [
            {host, "${MQ_HTTP_HOST}"},
            {port, ${MQ_HTTP_PORT}},
            {username, <<"${MQ_HTTP_USERNAME}">>},
            {password, <<"${MQ_HTTP_PASSWORD}">>},
            {{- if eq .Values.global.mq.tls.enabled true }}
              {ssl, [
                {tls, true}
              ]},
            {{- end }}
            {vhost, <<"${MQ_HTTP_VHOST}">>}
          ]
        {{- else }}
          {{- if eq .Values.global.mq.internal false }}
                  [
          {host, "${MQ_HOST}"},
          {port, ${MQ_PORT}},
          {username, <<"${MQ_USERNAME}">>},
          {password, <<"${MQ_PASSWORD}">>},
          {{- if eq .Values.global.mq.tls.enabled true }}
            {ssl, [
              {tls, true}
            ]},
          {{- end }}
          {vhost, <<"${MQ_VHOST}">>}
                ]
          {{- else }}
                  [
          {host, "rabbit-service"},
          {port, 5672},
          {username, <<"${MQ_USERNAME}">>},
          {password, <<"${MQ_PASSWORD}">>},
          {vhost, <<"${MQ_VHOST}">>}
                ]
          {{- end }}
          {{- end }}
            ]},
        {connections_per_queue, 1},
        {channels_per_connection, 1},
        {messages_prefetch_size_per_channel, 50}
        ]}
        ]},

        {enigma, [
          {is_enabled, {{ .Values.global.enigma.enabled }}},
          {private_key_id, "{{ .Values.global.enigma.key_manager.enigma_pk_id }}"},
          {key_manager_host, "http://enigma-key-manager-service:8080"},
          {rotors_pool, [
            {min_size, 3},
            {max_size, 50},
            {start_size, 3}
          ]}
        ]},

        {corezoid_queues_gc, [
          {enabled, true},
          {{- if hasKey .Values.global "mq_http" }}
          {host, "${MQ_HTTP_HOST}"},
          {port, 15672 },
          {login, "${MQ_HTTP_USERNAME}"},
          {password, "${MQ_HTTP_PASSWORD}"},
          {{- else }}
          {{- if eq .Values.global.mq.internal false }}
           {host, "${MQ_HOST}"},
          {port, 15672},
          {login, "${MQ_USERNAME}"},
          {password, "${MQ_PASSWORD}"},
          {{- else }}
          {host, "rabbit-service"},
          {port, 15672},
          {login, "${MQ_USERNAME}"},
          {password, "${MQ_PASSWORD}"},
          {{- end }}
          {{- end }}
          {vhost, "${MQ_VHOST}"},
          {gc_queues_regexp, [
            "cce.ctrl", "settings",
            "ermql_license_distributor_request_cce", "mw_component_version_client_queue_cce"
          ]}
        ]},
    {{- if eq .Values.global.redis.sentinel.enable true }}
      {redis_sentinel, [
          {servers, [
            [
              {master_name, "{{ .Values.global.redis.sentinel.master_name }}"},     %% name of master redis santinel
              {redis_password, "${REDIS_PASSWORD}"},        %% Used for connect to redis          (optional) if empty can remove
              {sentinel_password, "${REDIS_PASSWORD}"},  %% Used for connect to redis sentinel (optional) if empty can remove
              {sentinels, [
                [
                  {{- if eq .Values.global.redis.tls.enabled true }}
                  {ssl, [
                     {tls, true}
                  ]},
                  {{- end }}
                  {host, "${REDIS_HOST}"},
                  {port, ${REDIS_PORT}}
                ]
              ]}
            ]
          ]}
        ]},
    {{- end }}
      %% for clustering components
      {corezoid_cluster, [
          {backend, redis}, %% maybe if future list will increase
          {redis, [
    {{- if eq .Values.global.redis.sentinel.enable  true }}
                {sentinel_master_name, "{{ .Values.global.redis.sentinel.master_name }}"}, %% From redis_sentinel master_name
                {{- if eq .Values.global.redis.tls.enabled true }}
                {ssl, [
                  {tls, true}
                ]},
                {{- end }}
    {{- else }}
          {{- if eq .Values.global.redis.internal false }}
              {host, "${REDIS_HOST}"},
              {instance_type, {{ .Values.global.redis.redistype | default "redis" }}}, %% by default redis.
              {port, ${REDIS_PORT}},
              {password,"${REDIS_PASSWORD}"},
              {{- if eq .Values.global.redis.tls.enabled true }}
                {ssl, [
                  {tls, true}
                ]},
              {{- end }}
          {{- else }}
              {host, "redis-master"},
              {instance_type, {{ .Values.global.redis.redistype | default "redis" }}}, %% by default redis.
              {port, 6379},
              {password,""},
          {{- end }}
    {{- end }}
              {database, 10}
          ]}
      ]},

      {is_ready, [
          {port, 8385},
          {enabled, true}
      ]},

      {cce, [
        {cce_id, <<"">>},

        {{- if .Values.global.enigma.encryption }}
        %% for ENCRYPT/DECRYPT data
        {encrypt_decrypt, [
          queue %% now it's encode-decode RabbitMQ
        ]},
        {{- end }}

        {memory_ratio_to_restart_cnode, 0.35}, %% min ratio to move pairs to cnodes
        {maps_ratio_to_restart_cnode, 0.7}, %% min ratio to move pairs to cnodes

        {light_cnode_threads_count, 1}, %% number of threads for light nodes
        {heavy_cnode_threads_count, 1}, %% number of threads for heavy nodes

        {light_cnode_watchdog_wakeup,  1000}, %% time when watchdog wakes up and kills "longlive" codes in light nodes
        {heavy_cnode_watchdog_wakeup, 800}, %% time when watchdog wakes up and kills "longlive" codes in heavy nodes

        {cnode_max_exec_code_time, {{ .Values.global.usercode.max_exec_code_time | default 1000 }}}, %% max time for each execution of code, kill process after this time
        %% if code not used for that time - the compiled code and internal related  data will be cleaned up
        {cnode_code_no_usage_ttl_ms, 60000},

        {cnode_threshold_to_writing_log, 0.1}, %% max threshold to write it to log
        {max_exec_time_to_change_cnode_type, 0.1}, %% max exec piece of codes to change them to heavy node

        {cnode_max_ram_available_mb, 31999}, %% in Mb
        {cnode_min_av_ram_to_clean_isolates, 26400}, %% // 25% from 10 Gb in Kb
        {cnode_min_av_ram_to_clean_isolates_mb, 1024}, %% in Mb
        {cnode_max_used_per_isolate, 20}, %% // in Mb
        {cnode_max_used_per_isolate_mb, 100}, %% in Mb

        {cnode_socket_buffer_size_mb, {{ .Values.global.usercode.cnode_socket_buffer_size_mb | default 10 }}}, %% in Mb (read, write socket buffers)

        {show_err_resps, false},     %% If true, then more logs are displayed
        {show_ok_resps, false},      %% If true, then more logs are displayed

        % postgresql settings
        {pgsql, [
          {{- if .Values.global.db.bouncer }}
            {host, "pgbouncer-service"},
          {{- else }}
            {host, "${POSTGRES_DBHOST}"},
          {{- end }}
            {user, "${POSTGRES_DBUSER}"},
            {dbname, "cce"},
            {password, "${POSTGRES_DBPWD}"},
            {start_size, 1},
            {min_size, 0},
            {max_size, 5}
        ]},

        % postgresql statistics settings
        {pgsql_statistics, [
          {{- if .Values.global.db.bouncer }}
            {host, "pgbouncer-service"},
          {{- else }}
            {host, "${POSTGRES_DBHOST}"},
          {{- end }}
            {user, "${POSTGRES_DBUSER}"},
            {dbname, "conveyor"},
            {password, "${POSTGRES_DBPWD}"},
            {start_size, 1},
            {min_size, 0},
            {max_size, 5}
        ]},


        %% Consumer packages (code compilation, receiving code, code deletion)
        {consumer_ctrl, [
                {servers, [
          {{- if eq .Values.global.mq.internal false }}
                      [
                        {host, "${MQ_HOST}"},
                        {port, ${MQ_PORT}},
                        {username, <<"${MQ_USERNAME}">>},
                        {password, <<"${MQ_PASSWORD}">>},
                        {{- if eq .Values.global.mq.tls.enabled true }}
                          {ssl, [
                            {tls, true}
                          ]},
                        {{- end }}
                        {vhost, <<"${MQ_VHOST}">>}
                    ]
          {{- else }}
                      [
                        {host, "rabbit-service"},
                        {port, 5672},
                        {username, <<"${MQ_USERNAME}">>},
                        {password, <<"${MQ_PASSWORD}">>},
                        {vhost, <<"${MQ_VHOST}">>}
                    ]
          {{- end }}
                ]},
            {queues_count, 1},
            {connections_per_queue, 1},   %% The specified number of tcp connections will be created for each queue
            {channels_per_connection, 1},   %% Virtual connections for one connections_per_queue
            {messages_prefetch_size_per_channel, 20}    %% The number of queues within the channel
        ]},

        %% answer producer cce
        {publish_process_data, [
                {servers, [
          {{- if eq .Values.global.mq.internal false }}
                      [
                        {host, "${MQ_HOST}"},
                        {port, ${MQ_PORT}},
                        {username, <<"${MQ_USERNAME}">>},
                        {password, <<"${MQ_PASSWORD}">>},
                        {{- if eq .Values.global.mq.tls.enabled true }}
                          {ssl, [
                            {tls, true}
                          ]},
                        {{- end }}
                        {vhost, <<"${MQ_VHOST}">>}
                    ]
          {{- else }}
                      [
                        {host, "rabbit-service"},
                        {port, 5672},
                        {username, <<"${MQ_USERNAME}">>},
                        {password, <<"${MQ_PASSWORD}">>},
                        {vhost, <<"${MQ_VHOST}">>}
                    ]
          {{- end }}
                ]},
            {min_size, 10},
            {max_size, 10},
            {start_size, 10}
        ]},

        %% code processing concierge
        {consumer_process_data, [
                {servers, [
          {{- if eq .Values.global.mq.internal false }}
                      [
                        {host, "${MQ_HOST}"},
                        {port, ${MQ_PORT}},
                        {username, <<"${MQ_USERNAME}">>},
                        {password, <<"${MQ_PASSWORD}">>},
                        {{- if eq .Values.global.mq.tls.enabled true }}
                          {ssl, [
                            {tls, true}
                          ]},
                        {{- end }}
                        {vhost, <<"${MQ_VHOST}">>}
                    ]
          {{- else }}
                      [
                        {host, "rabbit-service"},
                        {port, 5672},
                        {username, <<"${MQ_USERNAME}">>},
                        {password, <<"${MQ_PASSWORD}">>},
                        {vhost, <<"${MQ_VHOST}">>}
                    ]
          {{- end }}
                ]},
            {queues_count, 5},
            {connections_per_queue, 5},   %% The specified number of tcp connections will be created for each queue
            {channels_per_connection, 2},   %% Virtual connections for one connections_per_queue
            {messages_prefetch_size_per_channel, 100}    %% The number of queues within the channel
        ]},

        %% sending metrics to zabbix
        {zabbix, [
            {server, "localhost"},
            {src_host, "localhost"},
            {send_interval, 5},
            {disabled, true}
        ]}
      ]},

      %% sending metrics to zabbix
      {zabbix_sender, [
          {zabbix_host, "localhost"},
          {zabbix_port, 10051},
          {nodename, "localhost"},
          {disabled, true}
      ]},

      {lager, [
          {log_root, "/ebsmnt/erlang/usercode/log"},
          %% What handlers to install with what arguments (wrapped by middleman)
          {handlers, [ {lager_console_backend, [{level, {{ .Values.global.log_level | default "info" }} }] } ]},
            %% What colors to use with what log levels
            {colored, true},
            {colors, [
              {debug,     "\e[0;38m" },
              {info,      "\e[1;37m" },
              {notice,    "\e[1;36m" },
              {warning,   "\e[1;33m" },
              {error,     "\e[1;31m" },
              {critical,  "\e[1;35m" },
              {alert,     "\e[1;44m" },
              {emergency, "\e[1;41m" }
            ]},

            %% Whether to write a crash log, and where. Undefined means no crash logger.
            {crash_log, "crash.log"},
            %% Maximum size in bytes of events in the crash log - defaults to 65536
            {crash_log_msg_size, 65536},
            %% Maximum size of the crash log in bytes, before its rotated, set
            %% to 0 to disable rotation - default is 0
            {crash_log_size, 734003200},
            %% What time to rotate the crash log - default is no time
            %% rotation. See the README for a description of this format.
            {crash_log_date, "$D0"},
            %% Number of rotated crash logs to keep, 0 means keep only the
            %% current one - default is 0
            {crash_log_count, 1},
            %% Whether to redirect error_logger messages into lager - defaults to true
            {error_logger_redirect, true},
            %% How many messages per second to allow from error_logger before we start dropping them
            {error_logger_hwm, 100},
            %% How big the gen_event mailbox can get before it is switched into sync mode
            {async_threshold, 3200},
            %% Switch back to async mode, when gen_event mailbox size decrease from `async_threshold'
            %% to async_threshold - async_threshold_window
            {async_threshold_window, 3010}
        ]
      },

        {hcheck_sender, [
            {host, <<"hcs-service">>}, %% host of the remote healthcheck server
            {port, 5011}, %% port of the remote healthcheck server
            {node_name, <<"usercode-{{ .Values.global.subdomain }}.{{ .Values.global.domain }}">> }, %% different for each node
            {node_type, <<"usercode">> }, %% capi | worker | multipart | http_worker | usercode | deepmemo ...
            {disabled, true}, %% true by default
            {send_interval_sec, 30}, %% by default 10 sec
            {send_system_counters, true} %% memory processes etc, false by default
        ]}

    ].

kind: ConfigMap
metadata:
  name: {{ .Values.appName }}-config
