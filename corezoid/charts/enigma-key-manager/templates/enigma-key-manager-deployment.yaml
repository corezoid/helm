{{- if eq .Values.global.enigma.enabled true }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.appName }}-deployment
  labels:
    app: {{ .Values.global.product }}
    tier: {{ .Values.appName }}
spec:
  selector:
    matchLabels:
      tier: {{ .Values.appName }}
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 25%
  template: # create pods using pod definition in this template
    metadata:
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/enigma-key-manager-configmap.yaml") . | sha256sum }}
      labels:
        app: {{ .Values.global.product }}
        tier: {{ .Values.appName }}
    spec:
      {{ if .Values.global.capi.affinity }}
      affinity:
        {{ .Values.global.capi.affinity | toYaml | nindent 8 | trim }}
      {{- end}}
      {{- with .Values.global.capi.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- if .Values.global.capi.topologySpreadConstraints }}
      topologySpreadConstraints:
        {{ .Values.global.capi.topologySpreadConstraints | toYaml | nindent 8 | trim }}
      {{- end}}
      terminationGracePeriodSeconds: 40
      initContainers:
        - name: init-wait-postgres
          image: "{{ .Values.global.imageRegistry }}/{{ .Values.global.repotype }}/{{ .Values.pgbouncerClientImage.repository }}:{{ .Values.pgbouncerClientImage.tag }}"
          command:
            - sh
            - -c
            - |
              export PGPASSWORD={{ .Values.global.db.secret.dbsuperuserpwd }}
              cd /etc/pgbouncer/
              {{- if eq .Values.global.db.serverTlsSslenabled true }}
              psql --set=sslmode={{ .Values.global.db.serverTlsSslmode }} -h {{ .Values.global.db.secret.data.dbhost }} -U {{ .Values.global.db.secret.dbsuperuser }} -p {{ .Values.global.db.secret.data.dbport }} -d enigma -Atc '\dt' > 1
              {{- else }}
              psql -h {{ .Values.global.db.secret.data.dbhost }} -U {{ .Values.global.db.secret.dbsuperuser }} -p {{ .Values.global.db.secret.data.dbport }} -d enigma -Atc '\dt' > 1
              {{- end }}
              base=$(cat 1 | cut -c8-10| head -1)
              if [[ "$base" == "cpk" ]]; then
              echo "alredy create"
              else
              {{- if eq .Values.global.db.serverTlsSslenabled true }}
              psql --set=sslmode={{ .Values.global.db.serverTlsSslmode }} -h {{ .Values.global.db.secret.data.dbhost }} -U {{ .Values.global.db.secret.dbsuperuser }} -p {{ .Values.global.db.secret.data.dbport }} -d enigma -Atc '
              {{- else }}
              psql -h {{ .Values.global.db.secret.data.dbhost }} -U {{ .Values.global.db.secret.dbsuperuser }} -p {{ .Values.global.db.secret.data.dbport }} -d enigma -Atc '
              {{- end }}
              CREATE EXTENSION IF NOT EXISTS "uuid-ossp";
              CREATE TABLE cpk (
                   id                     UUID PRIMARY KEY DEFAULT uuid_generate_v1(),
                   master_key_id          VARCHAR(100) NOT NULL,
                   encrypted_private_key  bytea NOT NULL,
                   algorithm              VARCHAR(100) NOT NULL,
                   expire_time            int NOT NULL,
                   note                   VARCHAR(1000) NOT NULL,
                   kms_type               VARCHAR(100) NOT NULL,
                   created_at             TIMESTAMP DEFAULT now(),
                   deleted_at             TIMESTAMP DEFAULT NULL);
                   GRANT SELECT,INSERT,UPDATE,DELETE ON ALL TABLES IN SCHEMA public TO appusers;
                   GRANT SELECT,UPDATE ON ALL SEQUENCES IN SCHEMA public TO appusers;'
              fi
          env:
            - name: POSTGRES_DBHOST
              {{- if .Values.global.db.bouncer }}
              value: "pgbouncer-service"
              {{- else }}
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.global.db.secret.name }}
                  key: dbhost
                {{- end }}
            - name: POSTGRES_DBPORT
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.global.db.secret.name }}
                  key: dbport
      shareProcessNamespace: true
      containers:
        - name: {{ .Values.appName }}
          image: "{{ .Values.global.imageRegistry }}/{{ .Values.global.repotype }}/{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.global.imagePullPolicy | default "IfNotPresent" }}
          envFrom:
            - configMapRef:
                name: timezone-config
          env:
          - name: POSTGRES_DBHOST
          {{- if .Values.global.db.bouncer }}
            value: "pgbouncer-service"
          {{- else }}
            valueFrom:
              secretKeyRef:
                name: {{ .Values.global.db.secret.name }}
                key: dbhost
          {{- end }}
          - name: POSTGRES_DBPORT
            valueFrom:
              secretKeyRef:
                name: {{ .Values.global.db.secret.name }}
                key: dbport
          - name: POSTGRES_DBUSER
            valueFrom:
              secretKeyRef:
                name: {{ .Values.global.db.secret.name }}
                key: dbuser
          - name: POSTGRES_DBPWD
            valueFrom:
              secretKeyRef:
                name: {{ .Values.global.db.secret.name }}
                key: dbpwd
          ports:
          - containerPort: 8080
          resources:
            {{ .Values.global.enigma.key_manager.resources | toYaml | indent 12 | trim }}
          volumeMounts:
            - name: {{ .Values.appName }}-config
              mountPath: /ebsmnt/conf/production.json
              subPath: production.json
{{- if .Values.global.imagePullSecrets }}
      imagePullSecrets:
      {{- range $pullSecret := .Values.global.imagePullSecrets }}
        - name: {{ $pullSecret }}
      {{- end }}
{{- end }}
      volumes:
        - name: {{ .Values.appName }}-config
          configMap:
            name: {{ .Values.appName }}-config
{{- end }}
