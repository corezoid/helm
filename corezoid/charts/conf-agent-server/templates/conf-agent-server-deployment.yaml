apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.appName }}-deployment
  labels:
    app: {{ .Values.global.product }}
    tier: {{ .Values.appName }}
spec:
  selector:
    matchLabels:
      tier: {{ .Values.appName }}
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  template:
    metadata:
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/conf-agent-server-configmap.yaml") . | sha256sum }}
      labels:
        app: {{ .Values.global.product }}
        tier: {{ .Values.appName }}
    spec:
      terminationGracePeriodSeconds: 40
      initContainers:
        - name: init-wait
          image: "{{ .Values.global.db.image | default "postgres:15-alpine" }}"
          imagePullPolicy: {{ .Values.global.db.imagePullPolicy | default "IfNotPresent" }}
          {{- if eq .Values.global.db.serverTlsSslenabled true }}
          command: ["sh", "-c", "until PGPASSWORD=${POSTGRES_DBPWD} psql --set=sslmode={{ .Values.global.db.serverTlsSslmode }} -h ${POSTGRES_DBHOST} -U ${POSTGRES_DBUSER} -d settings -c \"select 1\" > /dev/null 2>&1 ; do echo Waiting while postgres created settings db ...; sleep 3; done"]
          {{- else }}
          command: ["sh", "-c", "until PGPASSWORD=${POSTGRES_DBPWD} psql -h ${POSTGRES_DBHOST} -U ${POSTGRES_DBUSER} -d settings -c \"select 1\" > /dev/null 2>&1 ; do echo Waiting while postgres created settings db ...; sleep 3; done"]
          {{- end }}
          env:
            - name: MQ_HOST
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.global.mq.secret.name }}
                  key: host
            - name: MQ_PORT
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.global.mq.secret.name }}
                  key: port
            - name: POSTGRES_DBHOST
              {{- if .Values.global.db.bouncer }}
              value: "pgbouncer-service"
              {{- else }}
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.global.db.secret.name }}
                  key: dbhost
                {{- end }}
            - name: POSTGRES_DBPORT
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.global.db.secret.name }}
                  key: dbport
            - name: POSTGRES_DBUSER
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.global.db.secret.name }}
                  key: dbuser
            - name: POSTGRES_DBPWD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.global.db.secret.name }}
                  key: dbpwd
      shareProcessNamespace: true
      containers:
        - name: {{ .Values.appName }}
          imagePullPolicy: {{ .Values.global.imagePullPolicy | default "IfNotPresent" }}
          image: "{{ .Values.global.imageRegistry }}/{{ if .Values.global.useCentos9 }}{{ .Values.global.centos9Repo }}/{{ else if .Values.global.useCentos8 }}{{ .Values.global.centos8Repo }}/{{ else }}{{- if not (eq .Values.global.repotype "") }}{{ .Values.global.repotype }}/{{- end }}{{ end }}{{ .Values.image.repository }}:{{ .Values.global.conf_agent_server.tag | default .Chart.AppVersion }}"
          envFrom:
            - configMapRef:
                name: timezone-config
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            {{- if .Values.global.store_dumps.enabled }}
            - name: ERL_CRASH_DUMP
              value: "/var/dumps/$(POD_NAME)-erl.dump"
            {{- end }}
            - name: NODE_COOKIE
              value: {{ .Values.appName }}-{{ .Release.Namespace }}
            - name: RELX_REPLACE_OS_VARS
              value: "true"
            - name: REDIS_HOST
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.global.redis.secret.name }}
                  key: host
            - name: REDIS_PORT
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.global.redis.secret.name }}
                  key: port
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.global.redis.secret.name }}
                  key: password
            - name: MQ_HOST
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.global.mq.secret.name }}
                  key: host
            - name: MQ_PORT
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.global.mq.secret.name }}
                  key: port
            - name: MQ_VHOST
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.global.mq.secret.name }}
                  key: vhost
            - name: MQ_USERNAME
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.global.mq.secret.name }}
                  key: username
            - name: MQ_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.global.mq.secret.name }}
                  key: password
            {{- if hasKey .Values.global "mq_http" }}
            - name: MQ_HTTP_HOST
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.global.mq_http.secret.name }}
                  key: host
            - name: MQ_HTTP_PORT
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.global.mq_http.secret.name }}
                  key: port
            - name: MQ_HTTP_VHOST
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.global.mq_http.secret.name }}
                  key: vhost
            - name: MQ_HTTP_USERNAME
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.global.mq_http.secret.name }}
                  key: username
            - name: MQ_HTTP_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.global.mq_http.secret.name }}
                  key: password
            {{- end }}
            - name: POSTGRES_DBHOST
              {{- if .Values.global.db.bouncer }}
              value: "pgbouncer-service"
              {{- else }}
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.global.db.secret.name }}
                  key: dbhost
                {{- end }}
            - name: POSTGRES_DBUSER
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.global.db.secret.name }}
                  key: dbuser
            - name: POSTGRES_DBPWD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.global.db.secret.name }}
                  key: dbpwd
            - name: POSTGRES_DBPORT
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.global.db.secret.name }}
                  key: dbport
          ports:
          - containerPort: {{ .Values.containers.containerPort }}
          - containerPort: 8385
          lifecycle:
            preStop:
              exec:
                command: ["/ebsmnt/erlang/conf_agent_server/bin/conf_agent_server","stop"]
          volumeMounts:
            - name: {{ .Values.appName }}config
              mountPath: /ebsmnt/conf/conf_agent_server.config
              subPath: conf_agent_server.config
            - name: corezoid-license
              mountPath: /ebsmnt/certs
            {{- if .Values.global.store_dumps.enabled }}
            - name: dumps-volume
              mountPath: /var/dumps
            {{- end }}
          resources:
            {{ .Values.global.conf_agent_server.resources | toYaml | indent 12 | trim }}
          livenessProbe:
            httpGet:
              path: /liveness
              port: 8385
            initialDelaySeconds: 30
            periodSeconds: 3
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /readiness
              port: 8385
            initialDelaySeconds: 30
            periodSeconds: 3
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 3
{{- if .Values.global.imagePullSecrets }}
      imagePullSecrets:
      {{- range $pullSecret := .Values.global.imagePullSecrets }}
        - name: {{ $pullSecret }}
      {{- end }}
{{- end }}
      volumes:
        - name: {{ .Values.appName }}config
          configMap:
            name: {{ .Values.appName }}-config
        - name: corezoid-license
          secret:
            secretName: {{ .Values.global.licenseSecretName | default "license-share-new" }}
        {{- if .Values.global.store_dumps.enabled }}
        - name: dumps-volume
          hostPath:
            path: /var/dumps
        {{- end }}
      {{ if .Values.global.conf_agent_server.affinity }}
      affinity:
        {{ .Values.global.conf_agent_server.affinity | toYaml | nindent 8 | trim }}
      {{- end}}
      {{- with .Values.global.conf_agent_server.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- if .Values.global.conf_agent_server.topologySpreadConstraints }}
      topologySpreadConstraints:
        {{ .Values.global.conf_agent_server.topologySpreadConstraints | toYaml | nindent 8 | trim }}
      {{- end}}
      {{- if .Values.global.conf_agent_server.priorityClassName }}
      priorityClassName:
        {{ .Values.global.conf_agent_server.priorityClassName | toYaml | nindent 8 | trim }}
      {{- end}}
