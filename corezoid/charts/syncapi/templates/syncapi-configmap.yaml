apiVersion: v1
data:
  corezoid_api_sync.config: |
    [
      {is_ready, [
        {port, 8385},
        {enabled, true}
      ]},

      {mw_metrics, [
        {is_enabled, true},
        {subsystems, [erlprometheus]}
      ]},
      {corezoid_sdk, [{scheme, "http://"}]},
      {erlprometheus, [
        {host, {0,0,0,0}},
        {port, 9100}
      ]},

      {corezoid_license_client, [
         {driver, "{{ .Values.global.capi.licensepath | default "db" }}" },
         {pgsql, [
             {host, "${POSTGRES_DBHOST}"},
             {user, "${POSTGRES_DBUSER}"},
             {dbname, "settings"},
             {password, "${POSTGRES_DBPWD}"}
         ]},
         {path_to_license, "/ebsmnt/certs/corezoid_license"}
       ]},

      {{- if eq .Values.global.redis.sentinel.enable true }}
      {redis_sentinel, [
            {servers, [
              [
                {master_name, "{{ .Values.global.redis.sentinel.master_name }}"},     %% name of master redis santinel
                {redis_password, "${REDIS_PASSWORD}"},        %% Used for connect to redis          (optional) if empty can remove
                {sentinel_password, "${REDIS_PASSWORD}"},  %% Used for connect to redis sentinel (optional) if empty can remove
                {sentinels, [
                  [
                    {{- if eq .Values.global.redis.tls.enabled true }}
                    {ssl, [
                       {tls, true}
                    ]},
                    {{- end }}
                    {host, "${REDIS_HOST}"},
                    {port, ${REDIS_PORT}}
                  ]
                ]}
              ]
            ]}
          ]},
      {{- end }}

      %% for clustering components
      {corezoid_cluster, [
          {backend, redis}, %% maybe if future list will increase
          {redis, [
  {{- if eq .Values.global.redis.sentinel.enable  true }}
              {sentinel_master_name, "{{ .Values.global.redis.sentinel.master_name }}"}, %% From redis_sentinel master_name
              {{- if eq .Values.global.redis.tls.enabled true }}
              {ssl, [
                {tls, true}
              ]},
              {{- end }}
  {{- else }}
          {{- if eq .Values.global.redis.internal false }}
              {host, "${REDIS_HOST}"},
              {instance_type, {{ .Values.global.redis.redistype | default "redis" }}}, %% by default redis.
              {port, ${REDIS_PORT}},
              {password,"${REDIS_PASSWORD}"},
              {{- if eq .Values.global.redis.tls.enabled true }}
                {ssl, [
                  {tls, true}
                ]},
              {{- end }}
          {{- else }}
              {host, "redis-master"},
              {instance_type, {{ .Values.global.redis.redistype | default "redis" }}}, %% by default redis.
              {port, 6379},
              {password,""},
          {{- end }}
  {{- end }}
              {database, 10}
          ]}
      ]},

      {corezoid_queues_gc, [
          {enabled, true},
          {{- if hasKey .Values.global "mq_http" }}
          {host, "${MQ_HTTP_HOST}"},
          {port, 15672 },
          {login, "${MQ_HTTP_USERNAME}"},
          {password, "${MQ_HTTP_PASSWORD}"},
          {{- else }}
          {{- if eq .Values.global.mq.internal false }}
          {host, "${MQ_HOST}"},
          {port, 15672 },
          {login, "${MQ_USERNAME}"},
          {password, "${MQ_PASSWORD}"},
          {{- else }}
          {host, "rabbit-service"},
          {port, 15672},
          {login, "${MQ_USERNAME}"},
          {password, "${MQ_PASSWORD}"},
          {{- end }}
          {{- end }}
          {vhost, "${MQ_VHOST}"},
          {gc_queues_regexp, [
              "conf_agent_client_queue_corezoid_api_sync", "mw_component_version_client_queue_corezoid_api_sync"
          ]}
      ]},

      %% Default application min & max epmd ports for cluster solution
      {kernel, [
        {inet_dist_listen_min, 5666},
        {inet_dist_listen_max, 5666}
      ]},
      {ermql, [

        {publish_request, [
          {servers, [
              {{- if hasKey .Values.global "mq_http" }}
                [
                  {host, "${MQ_HTTP_HOST}"},
                  {port, ${MQ_HTTP_PORT}},
                  {username, <<"${MQ_HTTP_USERNAME}">>},
                  {password, <<"${MQ_HTTP_PASSWORD}">>},
                  {{- if eq .Values.global.mq.tls.enabled true }}
                    {ssl, [
                      {tls, true}
                    ]},
                  {{- end }}
                  {vhost, <<"${MQ_HTTP_VHOST}">>}
                ]
              {{- else }}
        {{- if eq .Values.global.mq.internal false }}
                [
                  {host, "${MQ_HOST}"},
                  {port, ${MQ_PORT}},
                  {username, <<"${MQ_USERNAME}">>},
                  {password, <<"${MQ_PASSWORD}">>},
                  {{- if eq .Values.global.mq.tls.enabled true }}
                    {ssl, [
                      {tls, true}
                    ]},
                  {{- end }}
                  {vhost, <<"${MQ_VHOST}">>}
              ]
        {{- else }}
                [
                  {host, "rabbit-service"},
                  {port, 5672},
                  {username, <<"${MQ_USERNAME}">>},
                  {password, <<"${MQ_PASSWORD}">>},
                  {vhost, <<"${MQ_VHOST}">>}
              ]
        {{- end }}
        {{- end }}
          ]},
            {queues_count, 8},
            {min_size, 5},
            {max_size, 25},
            {start_size, 5}
          ]},

        {consumer_response, [
          {servers, [
              {{- if hasKey .Values.global "mq_http" }}
                [
                  {host, "${MQ_HTTP_HOST}"},
                  {port, ${MQ_HTTP_PORT}},
                  {username, <<"${MQ_HTTP_USERNAME}">>},
                  {password, <<"${MQ_HTTP_PASSWORD}">>},
                  {{- if eq .Values.global.mq.tls.enabled true }}
                    {ssl, [
                      {tls, true}
                    ]},
                  {{- end }}
                  {vhost, <<"${MQ_HTTP_VHOST}">>}
                ]
              {{- else }}
        {{- if eq .Values.global.mq.internal false }}
                [
                  {host, "${MQ_HOST}"},
                  {port, ${MQ_PORT}},
                  {username, <<"${MQ_USERNAME}">>},
                  {password, <<"${MQ_PASSWORD}">>},
                  {{- if eq .Values.global.mq.tls.enabled true }}
                    {ssl, [
                      {tls, true}
                    ]},
                  {{- end }}
                  {vhost, <<"${MQ_VHOST}">>}
              ]
        {{- else }}
                [
                  {host, "rabbit-service"},
                  {port, 5672},
                  {username, <<"${MQ_USERNAME}">>},
                  {password, <<"${MQ_PASSWORD}">>},
                  {vhost, <<"${MQ_VHOST}">>}
              ]
        {{- end }}
        {{- end }}
          ]},
            {connections_per_queue, 4},
            {channels_per_connection, 2},
            {messages_prefetch_size_per_channel, 50}
          ]}
      ]},

      {corezoid_api_sync, [
      {prometheus_metrics, {{ .Values.global.prometheus_metrics | default false }}  },
      {nodes, []},
      {domain, <<"{{ .Values.global.syncapi.callback_domain | default "http://${IPNODEDOMAIN}:8090" }}">> }, %% callback domain (podIP)
      {api_port, 8090},
      {corezoid_host, <<"http://capi-service:9080">>},

      %% CALLBACK SETUP
      {callback, [
      {path, <<"/api/1/plugins/callback/">>},         %% Used for generate __callback_url for example host/callback.path/req_id where req_id is autogenerated
      {max_timeout, {{ .Values.global.syncapi.callback_max_timeout | default 60000 }}}                            %% Max timeout to receive callbacks - 60 seconds
      ]}
      ]},
      {lager, [
        %% What handlers to install with what arguments
        {log_root, "/ebsmnt/erlang/corezoid_api_sync/log"},
        {handlers, [ {lager_console_backend, [{level, {{ .Values.global.log_level | default "info" }} }] } ]},
        {extra_sinks,
                [
                {error_logger_lager_event,
                        [{handlers, [
                        {lager_file_backend, [{file, "error_logger.log"}, {level, info}]}]
                         }]
                }
                ]
        },

        %% What colors to use with what log levels
        {colored, true},
        {colors, [
        {debug,     "\e[0;38m" },
        {info,      "\e[1;37m" },
        {notice,    "\e[1;36m" },
        {warning,   "\e[1;33m" },
        {error,     "\e[1;31m" },
        {critical,  "\e[1;35m" },
        {alert,     "\e[1;44m" },
        {emergency, "\e[1;41m" }
        ]},
        %%
        %% Whether to write a crash log, and where. Undefined means no crash logger.
        {crash_log, "crash.log"},
        %% Maximum size in bytes of events in the crash log - defaults to 65536
        {crash_log_msg_size, 65536},
        %% Maximum size of the crash log in bytes, before its rotated, set
                                                                         %% to 0 to disable rotation - default is 0
        {crash_log_size, 10485760},
        %% What time to rotate the crash log - default is no time
        %% rotation. See the README for a description of this format.
        {crash_log_date, "$D0"},
        %% Number of rotated crash logs to keep, 0 means keep only the
        %% current one - default is 0
        {crash_log_count, 1},
        %% Whether to redirect error_logger messages into lager - defaults to true
        {error_logger_redirect, true},
        %% How many messages per second to allow from error_logger before we start dropping them
        {error_logger_hwm, 50},
        %% How big the gen_event mailbox can get before it is switched into sync mode
        {async_threshold, 20},
        %% Switch back to async mode, when gen_event mailbox size decrease from `async_threshold'
        %% to async_threshold - async_threshold_window
        {async_threshold_window, 5}
      ]}
    ].

kind: ConfigMap
metadata:
  name: {{ .Values.appName }}-config
