{{- if or (and (hasKey .Values.global.db "postgres_schema") (hasKey .Values.global.db.postgres_schema "version") (eq .Values.global.db.postgres_schema.version "5.7.0")) (eq .Chart.AppVersion "5.7.0") }}
apiVersion: v1
kind: Pod
metadata:
  name: postgres-post-install
  annotations:
    helm.sh/hook: "post-install,post-upgrade"
    helm.sh/hook-weight: "-5"
  labels:
    tier: postgres
spec:
  {{ if .Values.global.db.bouncer_affinity }}
  affinity:
    {{ .Values.global.db.bouncer_affinity | toYaml | nindent 4 | trim }}
  {{- end}}
  {{- with .Values.global.db.bouncer_tolerations }}
  tolerations:
    {{- toYaml . | nindent 8 }}
  {{- end }}
  containers:
    - image: "{{ .Values.global.db.image | default "postgres:15-alpine" }}"
      imagePullPolicy: {{ .Values.global.imagePullPolicy | default "IfNotPresent" }}
      name: postgres-taskarchive-cron
      command:
        - sh
        - -c
        - |
          {{- if eq .Values.global.db.serverTlsSslenabled true }}
          until PGPASSWORD=${POSTGRES_DBSUPERUSERPWD} psql --set=sslmode={{ .Values.global.db.serverTlsSslmode }} -h ${POSTGRES_DBHOST} -U ${POSTGRES_DBSUPERUSER} -d conveyor -Atc "SELECT 'projects'::regclass"; do echo Waiting while postgres created projects table ...; sleep 3; done
          until PGPASSWORD=${POSTGRES_DBSUPERUSERPWD} psql --set=sslmode={{ .Values.global.db.serverTlsSslmode }} -h ${POSTGRES_DBHOST} -U ${POSTGRES_DBSUPERUSER} -d conveyor -Atc "SELECT 'aliases'::regclass"; do echo Waiting while postgres created projects aliases ...; sleep 3; done
          echo  "$POSTGRES_DBHOST:*:*:$POSTGRES_DBSUPERUSER:$POSTGRES_DBSUPERUSERPWD" > ~/.pgpass; chmod 0600 ~/.pgpass;
          psql --set=sslmode={{ .Values.global.db.serverTlsSslmode }} -h $POSTGRES_DBHOST -U $POSTGRES_DBSUPERUSER -d conveyor -Atc "alter table IF EXISTS projects DROP column IF EXISTS owner_id;";
          psql --set=sslmode={{ .Values.global.db.serverTlsSslmode }} -h $POSTGRES_DBHOST -U $POSTGRES_DBSUPERUSER -d conveyor -Atc "alter table IF EXISTS aliases drop constraint IF EXISTS temp_aliases_short_name_company_id_project_id;";
          {{- else }}
          until PGPASSWORD=${POSTGRES_DBSUPERUSERPWD} psql -h ${POSTGRES_DBHOST} -U ${POSTGRES_DBSUPERUSER} -d conveyor -Atc "SELECT 'projects'::regclass"; do echo Waiting while postgres created projects table ...; sleep 3; done
          until PGPASSWORD=${POSTGRES_DBSUPERUSERPWD} psql -h ${POSTGRES_DBHOST} -U ${POSTGRES_DBSUPERUSER} -d conveyor -Atc "SELECT 'aliases'::regclass"; do echo Waiting while postgres created projects aliases ...; sleep 3; done
          echo  "$POSTGRES_DBHOST:*:*:$POSTGRES_DBSUPERUSER:$POSTGRES_DBSUPERUSERPWD" > ~/.pgpass; chmod 0600 ~/.pgpass;
          psql -h $POSTGRES_DBHOST -U $POSTGRES_DBSUPERUSER -d conveyor -Atc "alter table IF EXISTS projects DROP column IF EXISTS owner_id;";
          psql -h $POSTGRES_DBHOST -U $POSTGRES_DBSUPERUSER -d conveyor -Atc "alter table IF EXISTS aliases drop constraint IF EXISTS temp_aliases_short_name_company_id_project_id;";
          {{- end }}
      securityContext:
        runAsUser: 70
      env:
        - name: POSTGRES_DBHOST
          valueFrom:
            secretKeyRef:
              name: {{ .Values.global.db.secret.name }}
              key: dbhost
        - name: POSTGRES_DBSUPERUSER
          valueFrom:
            secretKeyRef:
              name: {{ .Values.global.db.secret.name }}-root
              key: dbsuperuser
        - name: POSTGRES_DBSUPERUSERPWD
          valueFrom:
            secretKeyRef:
              name: {{ .Values.global.db.secret.name }}-root
              key: dbsuperuserpwd
        - name: SHARD_COUNT
          value: '{{ .Values.global.db.shards_count }}'
  restartPolicy: Never
{{- end }}
