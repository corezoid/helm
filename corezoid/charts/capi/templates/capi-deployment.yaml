apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.appName }}-deployment
  labels:
    app: {{ .Values.global.product }}
    tier: {{ .Values.appName }}
spec:
  selector:
    matchLabels:
      tier: {{ .Values.appName }}
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  template:
    metadata:
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/capi-configmap.yaml") . | sha256sum }}
        checksum/config_vm: {{ include (print $.Template.BasePath "/capi-configmap-vm.yaml") . | sha256sum }}
        prometheus.io/path: /metrics
        prometheus.io/port: "9100"
        prometheus.io/scrape: "true"
      labels:
        app: {{ .Values.global.product }}
        tier: {{ .Values.appName }}
    spec:
      {{ if .Values.global.capi.affinity }}
      affinity:
        {{ .Values.global.capi.affinity | toYaml | nindent 8 | trim }}
      {{- end}}
      {{- with .Values.global.capi.tolerations | default list }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- if .Values.global.capi.topologySpreadConstraints }}
      topologySpreadConstraints:
        {{ .Values.global.capi.topologySpreadConstraints | toYaml | nindent 8 | trim }}
      {{- end}}
      {{- if .Values.global.capi.priorityClassName }}
      priorityClassName:
        {{ .Values.global.capi.priorityClassName | toYaml | nindent 8 | trim }}
      {{- end}}
      terminationGracePeriodSeconds: 60
      initContainers:
        - name: init-wait
          image: "{{ .Values.global.imageInit.repository }}:{{ .Values.global.imageInit.tag }}"
          command: ["sh", "-c", "until {{- if .Values.global.db.bouncer }} nc -zvw1 pgbouncer-service 5432 && {{- else }}  nc -zvw1 ${POSTGRES_DBHOST} ${POSTGRES_DBPORT} && {{- end }}  nc -zvw1  ${MQ_HOST} ${MQ_PORT}; do echo waiting for deps; sleep 2; done;"]
          env:
            - name: MQ_HOST
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.global.mq.secret.name }}
                  key: host
            - name: MQ_PORT
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.global.mq.secret.name }}
                  key: port
            - name: POSTGRES_DBHOST
              {{- if .Values.global.db.bouncer }}
              value: "pgbouncer-service"
              {{- else }}
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.global.db.secret.name }}
                  key: dbhost
            {{- end }}
            - name: POSTGRES_DBPORT
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.global.db.secret.name }}
                  key: dbport
        - name: init-wait-rmq
          image: "{{ .Values.global.imageInit.repository }}:{{ .Values.global.imageInit.tag }}"
          command: ['sh']
          args:
            - "-c"
            - |
              echo "Starting RabbitMQ initialization check..."
              echo "MQ_HOST: ${MQ_HOST}"
              echo "MQ_API_PORT: ${MQ_API_PORT}"
              echo "MQ_API_SCHEME: ${MQ_API_SCHEME}"
              
              # Determine the target host
              {{- if .Values.global.mq.internal }}
              TARGET_HOST="rabbit-service"
              echo "Using internal RabbitMQ service: $TARGET_HOST"
              {{- else }}
              TARGET_HOST="${MQ_HOST}"
              echo "Using external RabbitMQ host: $TARGET_HOST"
              {{- end }}
              
              # Test DNS resolution first
              echo "Testing DNS resolution for $TARGET_HOST..."
              if ! nslookup $TARGET_HOST >/dev/null 2>&1; then
                echo "WARNING: DNS resolution failed for $TARGET_HOST, but continuing..."
              else
                echo "DNS resolution successful for $TARGET_HOST"
              fi
              
              # Wait for RabbitMQ Management API to be ready
              echo "Waiting for RabbitMQ Management API to be available on $TARGET_HOST:${MQ_API_PORT}..."
              RETRY_COUNT=0
              MAX_RETRIES=60  # 2 minutes with 2s intervals
              until nc -zvw1 $TARGET_HOST ${MQ_API_PORT}; do 
                RETRY_COUNT=$((RETRY_COUNT + 1))
                if [ $RETRY_COUNT -gt $MAX_RETRIES ]; then
                  echo "ERROR: Timeout waiting for RabbitMQ Management API on $TARGET_HOST:${MQ_API_PORT}"
                  echo "Please check:"
                  echo "1. RabbitMQ is running and accessible"
                  echo "2. Management plugin is enabled"
                  echo "3. Port ${MQ_API_PORT} is open"
                  echo "4. Network connectivity from pod to $TARGET_HOST"
                  exit 1
                fi
                echo "Attempt $RETRY_COUNT/$MAX_RETRIES: Waiting for RabbitMQ Management API on $TARGET_HOST:${MQ_API_PORT}..."; 
                sleep 2; 
              done
              echo "RabbitMQ Management API is available on $TARGET_HOST:${MQ_API_PORT}"
              
              # Wait for exchanges to be ready
              echo "Checking for required exchanges..."
              RETRY_COUNT=0
              until wget -O - -q --header "Authorization: Basic `echo -n \"$MQ_USERNAME:$MQ_PASSWORD\" | base64`" ${MQ_API_SCHEME}://$TARGET_HOST:${MQ_API_PORT}/api/exchanges/%2Fconveyor/ | grep -qF "conf_agent_direct"; do 
                RETRY_COUNT=$((RETRY_COUNT + 1))
                if [ $RETRY_COUNT -gt $MAX_RETRIES ]; then
                  echo "ERROR: Timeout waiting for exchange 'conf_agent_direct'"
                  echo "Please check:"
                  echo "1. RabbitMQ load definitions are properly configured"
                  echo "2. User $MQ_USERNAME has access to vhost /conveyor"
                  echo "3. Exchange 'conf_agent_direct' is created"
                  exit 1
                fi
                echo "Attempt $RETRY_COUNT/$MAX_RETRIES: waiting for exchanges to be ready..."; 
                sleep 2; 
              done
              echo "Exchange conf_agent_direct is ready!"
          env:
            - name: MQ_HOST
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.global.mq.secret.name }}
                  key: host
            - name: MQ_USERNAME
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.global.mq.secret.name }}
                  key: username
            - name: MQ_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.global.mq.secret.name }}
                  key: password
            - name: MQ_API_SCHEME
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.global.mq.secret.name }}
                  key: api_scheme
            - name: MQ_API_PORT
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.global.mq.secret.name }}
                  key: api_port
        - name: init-wait-elasticsearch
          image: "{{ .Values.global.imageInit.repository }}:{{ .Values.global.imageInit.tag }}"
          imagePullPolicy: IfNotPresent
          command:
            - sh
            - -c
            - until nc -zvw1 ${ELASTICSEARCH_HOST} ${ELASTICSEARCH_PORT};
              do echo waiting for dependencies; sleep 2; done;
          env:
            - name: ELASTICSEARCH_HOST
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.global.elasticsearch.secret.name }}
                  key: host
            - name: ELASTICSEARCH_PORT
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.global.elasticsearch.secret.name }}
                  key: port
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        {{- if eq .Values.global.enigma.enabled true }}
        - name: init-wait-enigma
          image: "{{ .Values.global.imageRegistry }}/{{ .Values.global.repotype }}/enigma-init-conteiner:latest"
          imagePullPolicy: {{ .Values.global.imagePullPolicy | default "IfNotPresent" }}
          command:
            - sh
            - -c
            - bash -x enigma_generate_key.sh
          volumeMounts:
            - name: enigma-key
              mountPath: /ebsmnt/conf/
              subPath: enigma_pk_id
        {{- end }}
      shareProcessNamespace: true
      containers:
        - name: {{ .Values.appName }}
          imagePullPolicy: {{ .Values.global.imagePullPolicy | default "IfNotPresent" }}
          image: "{{ .Values.global.imageRegistry }}/{{ if .Values.global.useCentos9 }}{{ .Values.global.centos9Repo }}/{{ else if .Values.global.useCentos8 }}{{ .Values.global.centos8Repo }}/{{ else }}{{- if not (eq .Values.global.repotype "") }}{{ .Values.global.repotype }}/{{- end }}{{ end }}{{ .Values.image.repository }}:{{ .Values.global.capi.tag | default .Chart.AppVersion }}"
          envFrom:
            - configMapRef:
                name: timezone-config
          env:
          - name: POD_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          {{- if .Values.global.store_dumps.enabled }}
          - name: ERL_CRASH_DUMP
            value: /var/dumps/$(POD_NAME)-erl.dump
          {{- end }}
          - name: NODE_COOKIE
            value: {{ .Values.appName }}-{{ .Release.Namespace }}
          - name: RELX_REPLACE_OS_VARS
            value: "true"
          - name: IPNODEDOMAIN
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: capi_front_captcha_key
            valueFrom:
              secretKeyRef:
                name: {{ .Values.global.capi.secret.name }}
                key: capi_front_captcha_key
          - name: capi_backend_captcha_key
            valueFrom:
              secretKeyRef:
                name: {{ .Values.global.capi.secret.name }}
                key: capi_backend_captcha_key
          - name: REDIS_HOST
            valueFrom:
              secretKeyRef:
                name: {{ .Values.global.redis.secret.name }}
                key: host
          - name: REDIS_PORT
            valueFrom:
              secretKeyRef:
                name: {{ .Values.global.redis.secret.name }}
                key: port
          - name: REDIS_PASSWORD
            valueFrom:
              secretKeyRef:
                name: {{ .Values.global.redis.secret.name }}
                key: password
          - name: REDIS_HOST_CACHE
            valueFrom:
              secretKeyRef:
                name: {{ .Values.global.redis.secret.name }}
                key: host_cache
          - name: REDIS_PORT_CACHE
            valueFrom:
              secretKeyRef:
                name: {{ .Values.global.redis.secret.name }}
                key: port_cache
          - name: REDIS_PASSWORD_CACHE
            valueFrom:
              secretKeyRef:
                name: {{ .Values.global.redis.secret.name }}
                key: password_cache
          - name: MQ_HOST
            valueFrom:
              secretKeyRef:
                name: {{ .Values.global.mq.secret.name }}
                key: host
          - name: MQ_PORT
            valueFrom:
              secretKeyRef:
                name: {{ .Values.global.mq.secret.name }}
                key: port
          - name: MQ_VHOST
            valueFrom:
              secretKeyRef:
                name: {{ .Values.global.mq.secret.name }}
                key: vhost
          - name: MQ_USERNAME
            valueFrom:
              secretKeyRef:
                name: {{ .Values.global.mq.secret.name }}
                key: username
          - name: MQ_PASSWORD
            valueFrom:
              secretKeyRef:
                name: {{ .Values.global.mq.secret.name }}
                key: password
          {{- if hasKey .Values.global "mq_http" }}
          - name: MQ_HTTP_HOST
            valueFrom:
              secretKeyRef:
                name: {{ .Values.global.mq_http.secret.name }}
                key: host
          - name: MQ_HTTP_PORT
            valueFrom:
              secretKeyRef:
                name: {{ .Values.global.mq_http.secret.name }}
                key: port
          - name: MQ_HTTP_VHOST
            valueFrom:
              secretKeyRef:
                name: {{ .Values.global.mq_http.secret.name }}
                key: vhost
          - name: MQ_HTTP_USERNAME
            valueFrom:
              secretKeyRef:
                name: {{ .Values.global.mq_http.secret.name }}
                key: username
          - name: MQ_HTTP_PASSWORD
            valueFrom:
              secretKeyRef:
                name: {{ .Values.global.mq_http.secret.name }}
                key: password
          {{- end }}
          - name: ELASTICSEARCH_HOST
            valueFrom:
              secretKeyRef:
                name: {{ .Values.global.elasticsearch.secret.name }}
                key: host
          - name: ELASTICSEARCH_PORT
            valueFrom:
              secretKeyRef:
                name: {{ .Values.global.elasticsearch.secret.name }}
                key: port
          - name: ELASTICSEARCH_SCHEMA
            valueFrom:
              secretKeyRef:
                name: {{ .Values.global.elasticsearch.secret.name }}
                key: schema
          {{- if eq .Values.global.elasticsearch.secret.auth_enabled true}}
          - name: ELASTICSEARCH_USERNAME
            valueFrom:
              secretKeyRef:
                name: {{ .Values.global.elasticsearch.secret.name }}
                key: username
          - name: ELASTICSEARCH_PASSWORD
            valueFrom:
              secretKeyRef:
                name: {{ .Values.global.elasticsearch.secret.name }}
                key: password
          {{- end }}
          - name: POSTGRES_DBHOST
            {{- if .Values.global.db.bouncer }}
            value: "pgbouncer-service"
            {{- else }}
            valueFrom:
              secretKeyRef:
                name: {{ .Values.global.db.secret.name }}
                key: dbhost
            {{- end }}
          - name: POSTGRES_DBUSER
            valueFrom:
              secretKeyRef:
                name: {{ .Values.global.db.secret.name }}
                key: dbuser
          - name: POSTGRES_DBPWD
            valueFrom:
              secretKeyRef:
                name: {{ .Values.global.db.secret.name }}
                key: dbpwd
          {{- if .Values.global.db.fdw_use_external_host }}
          - name: FDW_POSTGRES_HOST
            valueFrom:
              secretKeyRef:
                name: {{ .Values.global.db.secret.name }}
                key: dbhost
          {{- end }}
          - name: FDW_POSTGRES_DBUSER
            valueFrom:
              secretKeyRef:
                name: {{ .Values.global.db.secret.name }}
                key: dbuser_fdw
          - name: FDW_POSTGRES_DBPWD
            valueFrom:
              secretKeyRef:
                name: {{ .Values.global.db.secret.name }}
                key: dbpwd_fdw
          - name: POSTGRES_DBPORT
            valueFrom:
              secretKeyRef:
                name: {{ .Values.global.db.secret.name }}
                key: dbport
          ports:
          - containerPort: {{ .Values.containers.containerPort }}
          - containerPort: {{ .Values.containers.prometheusMetricsPort }}
          - containerPort: 8585
          - containerPort: 8385
          volumeMounts:
            {{- if eq .Values.global.capi.auth_providers_saml_enable true }}
            {{- range $k, $v := $.Values.global.capi.saml_idp }}
            - name: {{ $.Values.global.capi.capi_saml_secret_name }}
              mountPath: /ebsmnt/conf/auth_providers/support_metadata.xml
              subPath: support_metadata.xml
            {{- end }}
            {{- end }}
            {{- if eq .Values.global.enigma.enabled true }}
            - name: enigma-key
              mountPath: /ebsmnt/conf/enigma_pk_id
              subPath: enigma_pk_id
            {{- end }}
            {{- if .Values.global.capi.persistantVolumeClaimCreate }}
            - name: {{ .Values.appName }}-claim
              mountPath: /ebsmnt/conf/auth_providers
              readOnly: false
            - name: corezoidauth-config-file
              mountPath: /ebsmnt/conf/auth_providers/corezoid_auth.config
              subPath: corezoid_auth.config
              readOnly: false
            - name: corezoidauth-config-file
              mountPath: /ebsmnt/conf/auth_providers/support_auth.config
              subPath: support_auth.config
              readOnly: false
            {{- end }}
            - name: {{ .Values.appName }}config
              mountPath: /ebsmnt/conf/capi.config
              subPath: capi.config
            - name: {{ .Values.appName }}-config-vm
              mountPath: /ebsmnt/erlang/capi/releases/1/vm.args
              subPath: vm.args
            - name: corezoid-license
              mountPath: /ebsmnt/certs
            {{- if .Values.global.store_dumps.enabled }}
            - name: dumps-volume
              mountPath: /var/dumps
            {{- end }}
          resources:
            {{ .Values.global.capi.resources | toYaml | indent 12 | trim }}
          livenessProbe:
          {{- if eq (toString .Values.global.capi.livenessProbeType) "exec" }}
            exec:
              command:
                - bash
                - '-ec'
                - |
                  ulimit -n 1024
                  exec /usr/bin/capi liveness
          {{- else}}
            httpGet:
              path: /liveness
              port: 8385
          {{- end}}
            initialDelaySeconds: {{ .Values.global.capi.livenessProbeInitialDelaySeconds  | default "30"}}
            periodSeconds: {{ .Values.global.capi.livenessProbePeriodSeconds | default "3"}}
            timeoutSeconds: {{ .Values.global.capi.livenessProbeTimeoutSeconds | default "5"}}
            successThreshold: {{ .Values.global.capi.livenessProbeSuccessThreshold | default "1"}}
            failureThreshold: {{ .Values.global.capi.livenessProbeFailureThreshold | default "3"}}
          readinessProbe:
            {{- if eq (toString .Values.global.capi.readinessProbeType) "exec" }}
            exec:
              command:
                - bash
                - '-ec'
                - |
                  ulimit -n 1024
                  exec /usr/bin/capi readiness
            {{- else}}
            httpGet:
              path: /readiness
              port: 8385
            {{- end}}
            initialDelaySeconds: {{ .Values.global.capi.readinessProbeInitialDelaySeconds | default "30" }}
            periodSeconds:  {{ .Values.global.capi.readinessProbePeriodSeconds | default "3" }}
            timeoutSeconds:  {{ .Values.global.capi.readinessProbeTimeoutSeconds | default "5" }}
            successThreshold: {{ .Values.global.capi.readinessProbeSuccessThreshold | default "1" }}
            failureThreshold: {{ .Values.global.capi.readinessProbeFailureThreshold | default "3" }}
          securityContext:
            runAsNonRoot: true
            runAsUser: 1000
            runAsGroup: 1000
            capabilities:
              add: ["IPC_LOCK"]
{{- if .Values.global.imagePullSecrets }}
      imagePullSecrets:
      {{- range $pullSecret := .Values.global.imagePullSecrets }}
        - name: {{ $pullSecret }}
      {{- end }}
{{- end }}
      volumes:
        - name: {{ .Values.appName }}config
          configMap:
            name: {{ .Values.appName }}-config
        - name: {{ .Values.appName }}-config-vm
          configMap:
            name: {{ .Values.appName }}-config-vm
        {{- if eq .Values.global.enigma.enabled true }}
        - name: enigma-key
          emptyDir: {}
        {{- end }}
        - name: corezoidauth-config-file
          configMap:
            name: corezoidauth-config-file
#            defaultMode: 511
        - name: corezoid-license
          secret:
            secretName: {{ .Values.global.licenseSecretName | default "license-share-new" }}
        {{- if eq .Values.global.capi.auth_providers_saml_enable true }}
        - name: {{ .Values.global.capi.capi_saml_secret_name | default "capi-saml-secret" }}
          secret:
            secretName: {{ .Values.global.capi.capi_saml_secret_name | default "capi-saml-secret" }}
          {{- if .Values.global.capi.capi_saml_secret_support  }}
        - name: {{ .Values.global.capi.capi_saml_secret_name | default "capi-saml-secret-support" }}-support
          secret:
            secretName: {{ .Values.global.capi.capi_saml_secret_name | default "capi-saml-secret" }}
          {{- end }}
        {{- end }}
        {{- if .Values.global.capi.persistantVolumeClaimCreate }}
        - name: {{ .Values.appName }}-claim
          persistentVolumeClaim:
            claimName: {{ .Values.global.capi.persistantVolumeClaimName }}
            readOnly: false
        {{- end }}
        {{- if .Values.global.store_dumps.enabled }}
        - name: dumps-volume
          hostPath:
            path: /var/dumps
        {{- end }}
