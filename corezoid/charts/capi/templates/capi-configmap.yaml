apiVersion: v1
data:
  {{ .Values.appName }}.config: |
    %% -*- mode: erlang;  -*-
    [
            {limits_client, [
                {redis, [
                    [
            {{- if eq .Values.global.redis.sentinel.enable  true }}
                        {sentinel_master_name, "{{ .Values.global.redis.sentinel.master_name }}"}, %% From redis_sentinel master_name
            {{- else }}
                        {{- if eq .Values.global.redis.internal false }}
                        {host, "${REDIS_HOST}"},
                        {port, ${REDIS_PORT}},
                        {password,"${REDIS_PASSWORD}"},
                        {{- else }}
                        {host, "redis-master"},
                        {port, 6379},
                        {password,""},
                        {{- end }}
            {{- end }}
                        {database, 9},
                        {start_size, 1},
                        {min_size, 1},
                        {max_size, 50}
                    ]
                ]}
            ]},

        {corezoid_license_client, [
          {path_to_license, "/ebsmnt/certs/corezoid_license"}
        ]},

        {corezoid_global_stats, [
            {disabled, true}
        ]},

    {{- if eq .Values.global.redis.sentinel.enable true }}
    {redis_sentinel, [
          {servers, [
            [
              {master_name, "{{ .Values.global.redis.sentinel.master_name }}"},     %% name of master redis santinel
              {redis_password, "${REDIS_PASSWORD}"},        %% Used for connect to redis          (optional) if empty can remove
              {sentinel_password, "${REDIS_PASSWORD}"},  %% Used for connect to redis sentinel (optional) if empty can remove
              {sentinels, [
                [
                  {host, "${REDIS_HOST}"},
                  {port, ${REDIS_PORT}}
                ]
              ]}
            ]
          ]}
        ]},
    {{- end }}

        %% for clustering components
        {corezoid_cluster, [
            {backend, redis}, %% maybe if future list will increase
            {redis, [
    {{- if eq .Values.global.redis.sentinel.enable  true }}
                {sentinel_master_name, "{{ .Values.global.redis.sentinel.master_name }}"}, %% From redis_sentinel master_name
    {{- else }}
            {{- if eq .Values.global.redis.internal false }}
                {host, "${REDIS_HOST}"},
                {port, ${REDIS_PORT}},
                {password,"${REDIS_PASSWORD}"},
            {{- else }}
                {host, "redis-master"},
                {port, 6379},
                {password,""},
            {{- end }}
    {{- end }}
                {database, 10}
            ]}
        ]},

        %% merge storage
        {corezoid_global_storage, [
            {backend, redis}, %% maybe if future list will increase
            {redis, [
    {{- if eq .Values.global.redis.sentinel.enable  true }}
                {sentinel_master_name, "{{ .Values.global.redis.sentinel.master_name }}"}, %% From redis_sentinel master_name
    {{- else }}
            {{- if eq .Values.global.redis.internal false }}
                {host, "${REDIS_HOST}"},
                {port, ${REDIS_PORT}},
                {password,"${REDIS_PASSWORD}"},
            {{- else }}
                {host, "redis-master"},
                {port, 6379},
                {password,""},
            {{- end }}
    {{- end }}
                {database, 9}
            ]}
        ]},

        {is_ready, [
          {port, 8383},
          {disabled, false}
        ]},

      {mw_metrics, [
        {is_enabled, true},
        {subsystems, [erlprometheus]}
      ]},

      {erlprometheus, [
        {host, {0,0,0,0}},
        {port, 9100}
      ]},

          %% Envirement Variable
          {env_var, [
              %% - psql pool -
              {psql, [
                  {host,        "${POSTGRES_DBHOST}"},
                  {dbname, "conveyor"},
                  {user, "${POSTGRES_DBUSER}"},
                  {port,        5432},
                  {password, "${POSTGRES_DBPWD}"},
                  %% pool size
                  {start_size,  3},
                  {min_size,    3},
                  {max_size,    10}
              ]}
          ]},

    {{- if eq .Values.global.dbcall.enabled true }}
          {mw_db_call, [
              {enabled, true},
              {db_call_host, "{{ .Values.global.dbcall.schema }}://{{ .Values.global.dbcall.host }}"},
              {request_amqp, [
    {{- if eq .Values.global.mq.internal false }}
                {host, <<"${MQ_HOST}">>},
                {port, ${MQ_PORT}},
                {username, <<"${MQ_USERNAME}">>},
                {password, <<"${MQ_PASSWORD}">>},
                {vhost, <<"${MQ_VHOST}">>},
    {{- else }}
                {host, <<"rabbit-service">>},
                {port, 5672},
                {username, <<"${MQ_USERNAME}">>},
                {password, <<"${MQ_PASSWORD}">>},
                {vhost, <<"${MQ_VHOST}">>},
    {{- end }}
                {exchange, <<"db-call">>},
                {is_durable_exchange, true},
                {is_auto_delete_exchange, false},
                {prefetch, 100},
                {is_auto_delete_queue, false},
                {is_durable_queue, true}
              ]},
              {response_amqp, [
    {{- if eq .Values.global.mq.internal false }}
                {host, <<"${MQ_HOST}">>},
                {port, ${MQ_PORT}},
                {username, <<"${MQ_USERNAME}">>},
                {password, <<"${MQ_PASSWORD}">>},
                {vhost, <<"${MQ_VHOST}">>}
    {{- else }}
                {host, <<"rabbit-service">>},
                {port, 5672},
                {username, <<"${MQ_USERNAME}">>},
                {password, <<"${MQ_PASSWORD}">>},
                {vhost, <<"${MQ_VHOST}">>}
    {{- end }}
              ]},
              {response_queue, <<"mw_dunderdbcall_response_queue_">>}
          ]},
    {{- end }}

        {corezoid_sdk, [
          {host, "http://capi-service:9080"},
          {scheme, "http://"}
        ]},

        {ermql, [

            {publish_request, [
            {servers, [
          {{- if eq .Values.global.mq.internal false }}
              [
              {host, "${MQ_HOST}"},
              {port, ${MQ_PORT}},
              {username, <<"${MQ_USERNAME}">>},
              {password, <<"${MQ_PASSWORD}">>},
              {vhost, <<"${MQ_VHOST}">>}
            ],
            [
                {host, "${MQ_HOST}"},
                {port, ${MQ_PORT}},
                {username, <<"${MQ_USERNAME}">>},
                {password, <<"${MQ_PASSWORD}">>},
                {vhost, <<"${MQ_VHOST}">>},
                {pools, [dbcall]}
            ]
          {{- else }}
                  [
                    {host, "rabbit-service"},
                    {port, 5672},
                    {username, <<"${MQ_USERNAME}">>},
                    {password, <<"${MQ_PASSWORD}">>},
                    {vhost, <<"${MQ_VHOST}">>}
                ],
                [
                    {host, "rabbit-service"},
                    {port, 5672},
                    {username, <<"${MQ_USERNAME}">>},
                    {password, <<"${MQ_PASSWORD}">>},
                    {vhost, <<"${MQ_VHOST}">>},
                    {pools, [dbcall]}
                ]
          {{- end }}
            ]},
              {queues_count, 1},
              {min_size, 1},
              {max_size, 1},
              {start_size, 1}
            ]},

            {consumer_response, [
            {servers, [
          {{- if eq .Values.global.mq.internal false }}
                  [
                    {host, "${MQ_HOST}"},
                    {port, ${MQ_PORT}},
                    {username, <<"${MQ_USERNAME}">>},
                    {password, <<"${MQ_PASSWORD}">>},
                    {vhost, <<"${MQ_VHOST}">>}
                ],
                [
                    {host, "${MQ_HOST}"},
                    {port, ${MQ_PORT}},
                    {username, <<"${MQ_USERNAME}">>},
                    {password, <<"${MQ_PASSWORD}">>},
                    {vhost, <<"${MQ_VHOST}">>},
                    {pools, [dbcall]}
                ]
          {{- else }}
                  [
                    {host, "rabbit-service"},
                    {port, 5672},
                    {username, <<"${MQ_USERNAME}">>},
                    {password, <<"${MQ_PASSWORD}">>},
                    {vhost, <<"${MQ_VHOST}">>}
                ],
                [
                    {host, "rabbit-service"},
                    {port, 5672},
                    {username, <<"${MQ_USERNAME}">>},
                    {password, <<"${MQ_PASSWORD}">>},
                    {vhost, <<"${MQ_VHOST}">>},
                    {pools, [dbcall]}
                ]
          {{- end }}
            ]},
              {connections_per_queue, 1},
              {channels_per_connection, 1},
              {messages_prefetch_size_per_channel, 50}
            ]}

        ]},

        {corezoid_queues_gc, [
          {disabled, false},
          {{- if eq .Values.global.mq.internal false }}
          {host, "${MQ_HOST}"},
          {port, 15672 },
          {login, "${MQ_USERNAME}"},
          {password, "${MQ_PASSWORD}"},
          {{- else }}
          {host, "rabbit-service"},
          {port, 15672},
          {login, "${MQ_USERNAME}"},
          {password, "${MQ_PASSWORD}"},
          {{- end }}
          {vhost, "${MQ_VHOST}"},
          {gc_queues_regexp, ["api.ctrl","settings.capi"]}
        ]},

      {{- if eq .Values.global.capi.auth_providers_enable true }}
        {corezoid_auth_connector, [
          {auth_providers, [
            {{- $local := dict "first" true -}}
            {{- range $k, $v := $.Values.global.capi.saml_idp }}
            {{- if not $local.first -}},{{ end }}
            {{- $_ := set $local "first" false }}
            { {{ $k }}, [
              {type, saml},
              {show, {{ $v.front_button_show | default false }}},
              {name, "{{ $v.name }}"},
              {login_path, "{{ $v.login_path }}"},
              {icon_url, "{{ $v.icon_url }}"},
              {idp_metadata, "/ebsmnt/conf/{{ $k }}_metadata.xml"},
              {idp_signs_envelopes, {{ $v.idp_signs_envelopes }}},
              {idp_signs_assertions, {{ $v.idp_signs_assertions }}},
              {idp_signs_metadata, {{ $v.idp_signs_metadata }}},
              {sp_entity_id, "{{ $k }}.{{ $.Values.global.subdomain}}.{{ $.Values.global.domain }}"},
              {sp_consume_url, "https://{{ $.Values.global.subdomain}}.{{ $.Values.global.domain }}{{ $v.sp_consume_url }}"},
              {userinfo_map, [
                {id, subject},
                {email, subject},
                {name, [first_name, last_name]}
              ]}
            ]}
            {{- end }}
          ]}
        ]},
        {{- end }}

        {conv_params, [
            {min_version, 2} %% application should deny creating task (copy/rpc) if params are not valid.
                             %% We have in database conveyor table conveyors field version. If version in DB >= min_version in config we run validator else ignore.
        ]},

        %% DEPS for unloading logs to elastic/kibana systems
        %% there are 2 handlegjhrs.
        %% One of them uses for all error messages and crash logs during runtime system works
        %% Rest uses for put callback from direct url and mandrill to kibana/elastic
        %% with masked values (it takes from process autoclear params)
        {corezoid_logs_sender, [
            {handlers, [
                %{error_msg, [                                              %% error messages area
                %{host, ''},                                                %% RabbitMQ host
                %{port, },                                                  %% RabbitMQ port
                %{exchange, <<"CorezoidErrLogs">>},                         %% RabbitMQ exchange
                    %% RabbitMQ queue (param "i" depends on queues_count.
                    %% For queues_count = 4 will be creating 4 queues -
                    %% CorezoidErrLogsQueue1, CorezoidErrLogsQueue2,
                    %% CorezoidErrLogsQueue3, CorezoidErrLogsQueue4
                %{queue, <<"CorezoidErrLogsQueue{{ "{{" }}=i{{ "}}" }}">>},
                %{username, <<"">>},                                        %% RabbitMQ username
                %{password, <<"">>},                                        %% RabbitMQ password
                %{vhost, <<"">>},                                           %% RabbitMQ virtual host
                %{queues_count, 4},                                         %% this parameter is described above
                %{thread_count, 10}                                         %% How many threads will put into queues
            ]}
        ]},
        %% DEPS is used for connect sender and corezoid in one platform.
        %% It replaces liqpay platform
        {merchant_api, [
            %% it uses api for connection and signs all queries using login and secret keys
            {base_url, "http://merchant-service:8080"},         %% url merchant api
            {login,  "${MERCHANT_LOGIN}"},            %% login
            {secret, "${MERCHANT_SECRET}"},
            {skip_otp, {{ .Values.global.capi.merchant_api.skip_otp }}},
            {health_url, "http://merchant-service:7980/actuator/health"}
        ]},

        {enigma, [
          {is_enabled, {{ .Values.global.enigma.enabled }}},
          {private_key_id, "{{ .Values.global.capi.enigma_pk_id }}"},
          {key_manager_host, "http://enigma-key-manager-service:8080"},
          {rotors_pool, [
            {min_size, 3},
            {max_size, 50},
            {start_size, 3}
          ]}
        ]},


        %% MAIN capi application
        {capi,
            [
                {cookie, [ {secure, {{ .Values.global.capi.secure | default "false" }} } ]},
                {check_2fa, {{ .Values.global.capi.check_2fa | default "false" }} },
                {init_password, <<"{{ .Values.global.capi.init_admin_password }}">>},
                {login_attempts, {{ .Values.global.capi.login_attempts | default "5" }} },
                {share_api_keys_in_company, {{ .Values.global.capi.share_api_keys_in_company | default "false" }} },
                {prometheus_metrics, {{ .Values.global.prometheus_metrics | default false }}  },
                {use_limits_from_server, {{ .Values.global.use_limits_from_server | default false }}},
                {redis_users, [[
        {{- if eq .Values.global.redis.sentinel.enable  true }}
                 {sentinel_master_name, "{{ .Values.global.redis.sentinel.master_name }}"}, %% From redis_sentinel master_name
        {{- else }}
        {{- if eq .Values.global.redis.internal false }}
                  {host, "${REDIS_HOST}"},
                  {port, ${REDIS_PORT}},
                  {password,"${REDIS_PASSWORD}"},
        {{- else }}
                  {host, "redis-master"},
                  {port, 6379},
                  {password,""},
        {{- end }}
        {{- end }}
                  {start_size, 3},
                  {min_size, 3},
                  {max_size, 50},
                  {database, 1}
            ]]},
    {{- if .Values.global.gitcall.enabled }}
                {components, [<<"git_call">>]}, %% Enabling/disabling components. Uses mostly by frontend
                {{- end }}

                {{- if .Values.global.dbcall.enabled }}
                {components, [<<"db_call">>]}, %% Enabling/disabling components. Uses mostly by frontend
                {{- end }}
                %% It must be changed to unique name for every api node. It's personal
                %% queue where will come messages from others api nodes.
                {api_id, <<"">>},
                {server_port, 9080},  %% listener port

                {{- if .Values.global.enigma.encryption }}
                %% for ENCRYPT/DECRYPT data
                {encrypt_decrypt, [
                  queue, %% now it's encode-decode RabbitMQ
                  cache, %% Redis
                  db     %% PostgreSQL
                ]},
                {{- end }}

                {pg_fdw, [
                  {host, "localhost"}, %% by default host will get from pgsql.host
                  {reinit_if_changed, true}, %% by default false ( it will drop foreign server and create again )
                  {username, "${FDW_POSTGRES_DBUSER}"},
                  {password, "${FDW_POSTGRES_DBPWD}"}
                ]},

                {max_task_size_for_process_conv, {{ .Values.global.capi.max_task_size_for_process_conv | default 264000 }} }, %% max task size for process conv
                {max_task_size_for_st_diagramm_conv, {{ .Values.global.capi.max_task_size_for_st_diagramm_conv | default 264000 }} }, %% max task size for state diagramm conv
                {origin_whitelist, [
                    "{{ .Values.global.subdomain}}.{{ .Values.global.domain }}","{{ .Values.global.web_superadm.subdomain}}.{{ .Values.global.domain }}","{{ .Values.global.syncapi.subdomain}}.{{ .Values.global.domain }}"
                ]},

                %% cookie name where cookie string will put
                {cookie_name, <<"{{ .Values.global.subdomain }}.{{ .Values.global.domain }}">>},
                {cookie_expr_time, {{ .Values.global.capi.cookie_expr_time}} },
                {shards_count, {{ .Values.global.db.shards_count | default 10 }} },

                %% merchant api module that provides synchronization of the company through the middleware systems (Deepmemo, Corezoid and others)
                {companies_manager, {{ .Values.global.capi.companies_manager | default "mapi" }} }, %% if "mapi" then the merchant is used, if "corezoid_internal" then the merchant is not used. We recommend using corezoid_internal for the new installation, if the old installation then use only mapi

                %% Clearing old processes from the trash in days
                %% {ttl, 0} - keep forever
                {scraper, [
                  {scrap_interval, {{ .Values.global.capi.scraper.scrap_interval | default "1" }} }, % Cleanup script run interval
                  {ttl, {{ .Values.global.capi.scraper.ttl | default "30" }} }  % Retention time of a remote process in days ( if 0 - save infinity )
                ]},

                %% max req/sec of create|modify|delete for conv|folder|dashboard
                %% It will be logged as ->
                %% Ops limit is reached. UserId: 1, Obj: conv, Action: create, Limit: 10
                %% End-user will get the error ->
                %% Too many requests: limit is reached
                {max_reqs_limit, {{ .Values.global.capi.max_reqs_limit | default 5 }} },

                %% Main page for output link on dashboard, process, folders and others
                {main_page, "https://{{ .Values.global.subdomain }}.{{ .Values.global.domain }}"},

                %% it is a domain where cookie is binded
                {main_domain, "{{ .Values.global.domain }}"},

                %% It is used for create direct url in viber, telegram link
                %% And for confirm registration
                {api_host, "https://{{ .Values.global.subdomain }}.{{ .Values.global.domain }}/api"},

                %% it is solt for password when we use corezoid auth method(login+password)

                {admin_url1, "https://{{ .Values.global.subdomain }}.{{ .Values.global.domain }}"},       %% First version admin
                {admin_url2, "https://{{ .Values.global.subdomain }}.{{ .Values.global.domain }}"},       %% Second version admin

                %% When new user registers in corezoid system under
                %% login and password it checks this flag
                %% If it is false => corezoid doesn't send confirmation about registration
                %% and bind immediately user to system
                %% If it is true => corezoid send email confirmation and after confirm user
                %% user is binded to corezoid system
                {email_confirm, false},

            %% FRONT SETTINGS
            {front_settings, [
                {is_single_account, {{- .Values.global.sa.enabled }}},	%% enable SingleAccount auth
                {env, <<"prod">>}, %% Available test|pre|prod
                {host, [
                    {site, <<"{{ .Values.global.subdomain }}.{{ .Values.global.domain }}">>},   %% main page (navigate by clicking on the corezoid logo)
                    {doc, <<"{{ .Values.global.capi.front_setting.doc_host }}">>}, %% documentation (navigate by clicking on DOCS link)
                    %%{market, <<"...">>}, %% market (market api call)
                    {ws, <<"{{ .Values.global.subdomain }}.{{ .Values.global.domain }}">>},                    %% websocket
                    {webhook, <<"{{ .Values.global.subdomain }}.{{ .Values.global.domain }}">>},               %% corezoid domain
                    {auth, <<"{{ .Values.global.subdomain }}.{{ .Values.global.domain }}">>},                  %% account auth
                    {single_account, <<"{{ .Values.global.sa_web.subdomain }}.{{ .Values.global.domain }}">>}          %% for single account
                ]},
                {path, [
                    {api, <<"/api/2/json">>},   %% all apis POST queries
                    {upload, <<"/api/2/upload">>},  %% upload scheme, json, csv
                    {download, <<"/api/2/download">>},  %% download scheme, csv
                    {compare, <<"/api/2/compare">>},
                    {merge, <<"/api/2/merge">>},
                    {ws, <<"/api/1/sock_json">>},   %% events in real time
            	    {doc, [
                	    {index, <<"{{ .Values.global.capi.front_setting.doc_index }}">>}
                	    %%{introduction, <<"/introduction">>},
                	    %%{bot_platform, <<"/bot-platform-20">>},
                	    %%{task_export, <<"/tasks-export">>},
                	    %%{mask_values, <<"/task-parameters#masking-values">>}
            	    ]},

                    {webhook, <<"/api/2/">>},    %% this one plus host.webhook = (http:https)://host.webhook/path.webhook/(xml|json|nvp)/...
                    {auth, <<"/auth2/single_account">>}       %% account auth
                ]},
                {sender, [
                    %% Interaction with the sender to create Sender forms, Sender action...
                    {host, <<"builder.sender.mobi">>},
                    {path, [
                        {embed, <<"/embed.js?">>},
                        {builder, <<"/builder.html">>}
                    ]}
                ]},
                {captcha, [
                    {provider, {{ .Values.global.capi.captcha_provider }} },
                    {key, <<"${capi_front_captcha_key}">>}, %% key for works with captcha (page /login if corezoid registration)
                    {disabled, {{ .Values.global.capi.capi_front_captcha_disabled }} }
                ]},
                {whitelist, [<<"{{ .Values.global.domain }}">>]},
                {ui, [
                    {market, {{ .Values.global.capi.front_setting.ui.market }} },                  %% to Market button
                    {bot_platform, {{ .Values.global.capi.front_setting.ui.bot_platform }} },            %% button Create -> Bot platform
                    {old_editor, false },              %% button Old editor
                    {company, true},                   %% button Create -> Company
                    {search, true },                   %% process search
                    {send_invite, true },              %% send an invite or not
                    {health, false },                  %% Show health_check menu
                    {features, {{ .Values.global.capi.front_setting.ui.features }} },                               %% enabled merge by default if true
                    {billing, {{ .Values.global.capi.front_setting.ui.billing }} },                                 %% billing button display
                    {git_call, {{ .Values.global.capi.front_setting.ui.git_call }}},                                %% display of the git_call button
                    {tab_name, <<{{ .Values.global.capi.front_setting.ui.tab_name | quote }}>>},
                    {disabled_auth_logo, {{ .Values.global.capi.front_setting.ui.disabled_auth_logo }}},            %% disable or enable logo on main page
                    {default_company, << {{ quote .Values.global.capi.front_setting.ui.default_company }} >> },     %% Set default company name
                    {color, [
                              {main, << {{ quote .Values.global.capi.front_setting.ui.color_main }} >>},            %% main color
                              {logo, << {{ quote .Values.global.capi.front_setting.ui.color_logo }} >>},             %% logo color
                              {logo_hover, << {{ quote .Values.global.capi.front_setting.ui.color_logo_hover }} >>}  %% logo underline
                            ]}
                ]}
            ]},

                %% Elasticsearch includes info:
                %% 1. Processes
                %% 2. Dashboards
                %% 3. Folders
                %% Elastic helps us to find these objects for name, It's as like in DB
            {elastic_search, [
                {host, <<"${ELASTICSEARCH_SCHEMA}://${ELASTICSEARCH_HOST}">>},
                {port, ${ELASTICSEARCH_PORT} },
                {{- if eq .Values.global.elasticsearch.secret.auth_enabled true}}
                {username, <<"${ELASTICSEARCH_USERNAME}">>}, % optional
                {password, <<"${ELASTICSEARCH_PASSWORD}">>},  % optional
                {{- end }}
                {timeout, 50000}
            ]},

            % PgSQL settings
            %% main database pool settings ( the main base is company folders, processes, i.e. whole front )
            {pgsql, [
                {host, "${POSTGRES_DBHOST}"},
                    %% hosts - tasks, settings of nodes
                    {hosts, [
                    { [{{- $lastIndex := sub (len .Values.global.db.shards) 1}}
          {{- range $i, $e := .Values.global.db.shards }}
          {{- $i }}{{- if ne $i $lastIndex -}}, {{ end }} {{- end }}], "${POSTGRES_DBHOST}" }
                    ]},
                {user, "${POSTGRES_DBUSER}"},
                {dbname, "conveyor"},
                {password, "${POSTGRES_DBPWD}"},
                {min_size, 0},          %% The minimum number of connections after the start and 30 seconds of work.
                {max_size, 5},            %% The maximum number of connections is the border to which we can raise, within 30 seconds.
                {start_size, 2}           %% The number of connections that rises to the pool, at the start of this pool. Every 30 seconds check connect and then go to min_size
            ]},

            {pgsql_task_history, [
                      {host, "${POSTGRES_DBHOST}"},
                          %% hosts - tasks, settings of nodes
                          {hosts, [
                          { [{{- $lastIndex := sub (len .Values.global.db.shards) 1}}
          {{- range $i, $e := .Values.global.db.shards }}
          {{- $i }}{{- if ne $i $lastIndex -}}, {{ end }} {{- end }}], "${POSTGRES_DBHOST}" }
                    ]},
                { user, "${POSTGRES_DBUSER}" },
                { password, "${POSTGRES_DBPWD}" },
                {min_size, 0},
                {max_size, 50},
                {start_size, 3}
            ]},

            {write_data_to_history, false}, %% true|false - write or not tasks data into table

            %% database pool for for usercode sandboxes only
            {pgsql_cce_temp, [
                {host, "${POSTGRES_DBHOST}"},
                {user, "${POSTGRES_DBUSER}"},
                {db_name, "cce"},
                {password, "${POSTGRES_DBPWD}"},
                {min_size, 0},
                {max_size, 25},
                {start_size, 2}
            ]},

            %% database for git call
            {pgsql_git_call, [
                {host, "${POSTGRES_DBHOST}"},
                {user, "${POSTGRES_DBUSER}"},
                {db_name, "gitcall"},
                {password, "${POSTGRES_DBPWD}"},
                {min_size, 0},
                {max_size, 1},
                {start_size, 1}
            ]},

          %%  postgresql archive db
          { pgsql_archive, [
              { hosts, [
                { [{{- $lastIndex := sub (len .Values.global.db.shards) 1}}
            {{- range $i, $e := .Values.global.db.shards }}
            {{- $i }}{{- if ne $i $lastIndex -}}, {{ end }} {{- end }}], "${POSTGRES_DBHOST}" }
              ]},
              { user, "${POSTGRES_DBUSER}" },
              { password, "${POSTGRES_DBPWD}" },
              { start_size, 2 },
              { min_size, 0 },
              { max_size, 50 }
            ]},



            %% database pool for highloads clients (removal of highly loaded processes in a separate database)
            %% Extended solution
            {pgsql_extra, []},

            {kernel, [
                %%{inet_dist_listen_min, 52617},          %% for api cluster the minimum port that can use
                %%{inet_dist_listen_max, 52617}           %% for api cluster the maximum port that can use
            ]},

            % redis pool for counters and api-sum-s
            {redis1, [
                [
            {{- if eq .Values.global.redis.sentinel.enable  true }}
                    {sentinel_master_name, "{{ .Values.global.redis.sentinel.master_name }}"}, %% From redis_sentinel master_name
            {{- else }}
                    {{- if eq .Values.global.redis.internal false }}
                    {host, "${REDIS_HOST}"},
                    {port, ${REDIS_PORT}},
                    {password,"${REDIS_PASSWORD}"},
                    {{- else }}
                    {host, "redis-master"},
                    {port, 6379},
                    {password,""},
                    {{- end }}
            {{- end }}
                    {database,1},
                    {start_size, 5},
                    {min_size, 5},
                    {max_size, 50}
                ]
            ]},

            %% memory redis for cache task
            {redis2, [
                [
            {{- if eq .Values.global.redis.sentinel.enable  true }}
                    {sentinel_master_name, "{{ .Values.global.redis.sentinel.master_name }}"}, %% From redis_sentinel master_name
            {{- else }}
                    {{- if eq .Values.global.redis.internal false }}
                    {host, "${REDIS_HOST_CACHE}"},
                    {port, ${REDIS_PORT_CACHE}},
                    {password,"${REDIS_PASSWORD_CACHE}"},
                    {{- else }}
                    {host, "redis-master"},
                    {port, 6379},
                    {password,""},
                    {{- end }}
            {{- end }}
                    {database,3},
                    {start_size, 10},
                    {min_size, 10},
                    {max_size, 50}
                ]
            ]},

            %% redis pool for api_sum logic
            {redis_api_sum, [
                [
            {{- if eq .Values.global.redis.sentinel.enable  true }}
                    {sentinel_master_name, "{{ .Values.global.redis.sentinel.master_name }}"}, %% From redis_sentinel master_name
            {{- else }}
                    {{- if eq .Values.global.redis.internal false }}
                    {host, "${REDIS_HOST}"},
                    {port, ${REDIS_PORT}},
                    {password,"${REDIS_PASSWORD}"},
                    {{- else }}
                    {host, "redis-master"},
                    {port, 6379},
                    {password,""},
                    {{- end }}
            {{- end }}
                    {database,2},
                    {start_size, 2},
                    {min_size, 2},
                    {max_size, 50}
                ]
            ]},

            % to_worker mq
            %% (For scaling, the workers can communicate with different rabbitmqs (for example, 1 worker serves 1-5 shards, the 2nd worker serves 6-10 shards. They know who serves what among themselves))
            {publish_to_worker_request, [
                {servers, [
                    { [{{- $lastIndex := sub (len .Values.global.db.shards) 1}}
          {{- range $i, $e := .Values.global.db.shards }}
          {{- $i }}{{- if ne $i $lastIndex -}}, {{ end }} {{- end }}], [
          {{- if eq .Values.global.mq.internal false }}
                    {host, "${MQ_HOST}"}
                    ]}
                ]},
                {port, ${MQ_PORT} },
                {username, <<"${MQ_USERNAME}">>},
                {password, <<"${MQ_PASSWORD}">>},
          {{- else }}
                        {host, "rabbit-service"}
                    ]}
                ]},
                {port, 5672},
                {username, <<"${MQ_USERNAME}">>},
                {password, <<"${MQ_PASSWORD}">>},
          {{- end }}
                {vhost, <<"${MQ_VHOST}">>},
                {min_size, 25},
                {max_size, 25},
                {start_size, 25}
            ]},

            % api copy queue (support multiply consumers)
            {consumer_copy_task_request,[
                {servers, [
          {{- if eq .Values.global.mq.internal false }}
                      [
                        {host, "${MQ_HOST}"},
                        {port, ${MQ_PORT}},
                        {username, <<"${MQ_USERNAME}">>},
                        {password, <<"${MQ_PASSWORD}">>},
                        {vhost, <<"${MQ_VHOST}">>}
                    ]
          {{- else }}
                      [
                        {host, "rabbit-service"},
                        {port, 5672},
                        {username, <<"${MQ_USERNAME}">>},
                        {password, <<"${MQ_PASSWORD}">>},
                        {vhost, <<"${MQ_VHOST}">>}
                    ]
          {{- end }}
                ]},
                {queues_count, 1},
                {connections_per_queue, 1},
                {channels_per_connection, 1},
                {messages_prefetch_size_per_channel, 50}
            ]},

            %% logic get_task. Now on api will soon be on worker
            % api get_task queue (support multiply consumers)
            {consumer_get_task_request,[
                {servers, [
          {{- if eq .Values.global.mq.internal false }}
                      [
                        {host, "${MQ_HOST}"},
                        {port, ${MQ_PORT}},
                        {username, <<"${MQ_USERNAME}">>},
                        {password, <<"${MQ_PASSWORD}">>},
                        {vhost, <<"${MQ_VHOST}">>}
                    ]
          {{- else }}
                      [
                        {host, "rabbit-service"},
                        {port, 5672},
                        {username, <<"${MQ_USERNAME}">>},
                        {password, <<"${MQ_PASSWORD}">>},
                        {vhost, <<"${MQ_VHOST}">>}
                    ]
          {{- end }}
                ]},
                {order_by, true},
                {queues_count, 1},
                {connections_per_queue, 1},
                {channels_per_connection, 1},
                {messages_prefetch_size_per_channel, 50}
            ]},

            %% async events queue between users publisher
            {publish_user_actions_request, [
                {servers, [
          {{- if eq .Values.global.mq.internal false }}
                      [
                        {host, "${MQ_HOST}"},
                        {port, ${MQ_PORT}},
                        {username, <<"${MQ_USERNAME}">>},
                        {password, <<"${MQ_PASSWORD}">>},
                        {vhost, <<"${MQ_VHOST}">>}
                    ]
          {{- else }}
                      [
                        {host, "rabbit-service"},
                        {port, 5672},
                        {username, <<"${MQ_USERNAME}">>},
                        {password, <<"${MQ_PASSWORD}">>},
                        {vhost, <<"${MQ_VHOST}">>}
                    ]
          {{- end }}
                ]},
                {queues_count, 1},
                {min_size, 1},
                {max_size, 1},
                {start_size, 1}
            ]},

            %% async events queue consumer
            {consumer_user_actions_request, [
                {servers, [
          {{- if eq .Values.global.mq.internal false }}
                      [
                        {host, "${MQ_HOST}"},
                        {port, ${MQ_PORT}},
                        {username, <<"${MQ_USERNAME}">>},
                        {password, <<"${MQ_PASSWORD}">>},
                        {vhost, <<"${MQ_VHOST}">>}
                    ]
          {{- else }}
                      [
                        {host, "rabbit-service"},
                        {port, 5672},
                        {username, <<"${MQ_USERNAME}">>},
                        {password, <<"${MQ_PASSWORD}">>},
                        {vhost, <<"${MQ_VHOST}">>}
                    ]
          {{- end }}
                ]},
                {queues_count, 1},
                {connections_per_queue, 1},
                {channels_per_connection, 1},
                {messages_prefetch_size_per_channel, 50}
            ]},

            %% deprecated
            {consumer_notify_actions_request, [
                {servers, [
          {{- if eq .Values.global.mq.internal false }}
                      [
                        {host, "${MQ_HOST}"},
                        {port, ${MQ_PORT}},
                        {username, <<"${MQ_USERNAME}">>},
                        {password, <<"${MQ_PASSWORD}">>},
                        {vhost, <<"${MQ_VHOST}">>}
                    ]
          {{- else }}
                      [
                        {host, "rabbit-service"},
                        {port, 5672},
                        {username, <<"${MQ_USERNAME}">>},
                        {password, <<"${MQ_PASSWORD}">>},
                        {vhost, <<"${MQ_VHOST}">>}
                    ]
          {{- end }}
                ]},
                {queues_count, 1},
                {connections_per_queue, 1},
                {channels_per_connection, 2},
                {messages_prefetch_size_per_channel, 50}
            ]},

            %% consumer for multipart-worker
            %% work in pair with multipart worker
            %% through this queue goes tasks with loading scheme from multipart to api
            {consumer_multipart_connector_request, [
                {servers, [
          {{- if eq .Values.global.mq.internal false }}
                      [
                        {host, "${MQ_HOST}"},
                        {port, ${MQ_PORT}},
                        {username, <<"${MQ_USERNAME}">>},
                        {password, <<"${MQ_PASSWORD}">>},
                        {vhost, <<"${MQ_VHOST}">>}
                    ]
          {{- else }}
                      [
                        {host, "rabbit-service"},
                        {port, 5672},
                        {username, <<"${MQ_USERNAME}">>},
                        {password, <<"${MQ_PASSWORD}">>},
                        {vhost, <<"${MQ_VHOST}">>}
                    ]
          {{- end }}
                ]},
                {queues_count, 1},
                {connections_per_queue, 1},
                {channels_per_connection, 2},
                {messages_prefetch_size_per_channel, 50}
            ]},

            %% elasticsearch consumer
            {consumer_elastic_actions_request, [
                {servers, [
          {{- if eq .Values.global.mq.internal false }}
                      [
                        {host, "${MQ_HOST}"},
                        {port, ${MQ_PORT}},
                        {username, <<"${MQ_USERNAME}">>},
                        {password, <<"${MQ_PASSWORD}">>},
                        {vhost, <<"${MQ_VHOST}">>}
                    ]
          {{- else }}
                      [
                        {host, "rabbit-service"},
                        {port, 5672},
                        {username, <<"${MQ_USERNAME}">>},
                        {password, <<"${MQ_PASSWORD}">>},
                        {vhost, <<"${MQ_VHOST}">>}
                    ]
          {{- end }}
                ]},
                {queues_count, 1},
                {connections_per_queue, 1},
                {channels_per_connection, 2},
                {messages_prefetch_size_per_channel, 50}
            ]},

            %% settings publisher
            {publish_settings, [
                {servers, [
          {{- if eq .Values.global.mq.internal false }}
                      [
                        {host, "${MQ_HOST}"},
                        {port, ${MQ_PORT}},
                        {username, <<"${MQ_USERNAME}">>},
                        {password, <<"${MQ_PASSWORD}">>},
                        {vhost, <<"${MQ_VHOST}">>}
                    ]
          {{- else }}
                      [
                        {host, "rabbit-service"},
                        {port, 5672},
                        {username, <<"${MQ_USERNAME}">>},
                        {password, <<"${MQ_PASSWORD}">>},
                        {vhost, <<"${MQ_VHOST}">>}
                    ]
          {{- end }}
                ]},
                {min_size, 1},
                {max_size, 1},
                {start_size, 1}
            ]},

            %% settings consumer
            {consumer_settings, [
                {servers, [
          {{- if eq .Values.global.mq.internal false }}
                      [
                        {host, "${MQ_HOST}"},
                        {port, ${MQ_PORT}},
                        {username, <<"${MQ_USERNAME}">>},
                        {password, <<"${MQ_PASSWORD}">>},
                        {vhost, <<"${MQ_VHOST}">>}
                    ]
          {{- else }}
                      [
                        {host, "rabbit-service"},
                        {port, 5672},
                        {username, <<"${MQ_USERNAME}">>},
                        {password, <<"${MQ_PASSWORD}">>},
                        {vhost, <<"${MQ_VHOST}">>}
                    ]
          {{- end }}
                ]},
                {connections_per_queue, 1},
                {channels_per_connection, 1},
                {messages_prefetch_size_per_channel, 50}
            ]},



            %% Statistics consumer
            {consumer_statistics, [
                {servers, [
          {{- if eq .Values.global.mq.internal false }}
                      [
                        {host, "${MQ_HOST}"},
                        {port, ${MQ_PORT}},
                        {username, <<"${MQ_USERNAME}">>},
                        {password, <<"${MQ_PASSWORD}">>},
                        {vhost, <<"${MQ_VHOST}">>}
                    ]
          {{- else }}
                      [
                        {host, "rabbit-service"},
                        {port, 5672},
                        {username, <<"${MQ_USERNAME}">>},
                        {password, <<"${MQ_PASSWORD}">>},
                        {vhost, <<"${MQ_VHOST}">>}
                    ]
          {{- end }}
                ]},
                {connections_per_queue, 1},
                {channels_per_connection, 1},
                {messages_prefetch_size_per_channel, 1}
            ]},

            % ldap auth settings
            {ldap, [
                {server, "{{ .Values.global.capi.ldap_server }}"},
                {port, {{ .Values.global.capi.ldap_port }} },
          {{- if and .Values.global.capi.ldap_tls (eq .Values.global.capi.ldap_tls true) }}
                {tls, {{ .Values.global.capi.ldap_tls }}}, %% true | false
          {{- end }}
                {base, "{{ .Values.global.capi.ldap_base }}"},      %% ou=special users,o=middleware
                {filter, "{{ .Values.global.capi.ldap_filter }}"}, %% uid | cn
                {first_bind_user, {{ .Values.global.capi.ldap_first_bind_user }} }, %% then this param is true, bind_user_name, bind_user_pass should be filled. if it's false it is not necessary
                {bind_user_name, "{{ .Values.global.capi.ldap_bind_user_name }}" }, %% or like this "cn=middleware,ou=DHO,ou=fuib,dc=fuib,dc=com"
                {bind_user_pass, "{{ .Values.global.capi.ldap_bind_user_pass }}" },
                {user_nick_entry, "{{ .Values.global.capi.ldap_user_nick_entry }}" } %% ldap nick name path
            ]},

            %% google auth settings
            {oauth, [
              %% google auth for {{ .Values.global.subdomain }}.{{ .Values.global.domain }} (api1)
              {auth_google, [
                {client_id, "{{ .Values.global.sa.google_client_id }}"},
                {client_secret, "{{ .Values.global.sa.google_client_secret }}"},
                {return_url, "https://{{ .Values.global.subdomain }}.{{ .Values.global.domain }}/auth/google/return"},
                {type, auth_google},
                {oauth_url, "https://accounts.google.com/o/oauth2/auth"},
                {token_url, "https://accounts.google.com/o/oauth2/token"},
                {userinfo_url, "https://www.googleapis.com/oauth2/v1/userinfo?access_token="},
                {status, on}
              ]},

              %% google auth for {{ .Values.global.subdomain }}.{{ .Values.global.domain }} (api2)
              {auth2_google, [
                {client_id, "{{ .Values.global.sa.google_client_id }}"},
                {client_secret, "{{ .Values.global.sa.google_client_secret }}"},
                {return_url, "https://{{ .Values.global.subdomain }}.{{ .Values.global.domain }}/auth2/google/return"},
                {type, auth_google},
                {oauth_url, "https://accounts.google.com/o/oauth2/auth"},
                {token_url, "https://accounts.google.com/o/oauth2/token"},
                {userinfo_url, "https://www.googleapis.com/oauth2/v1/userinfo?access_token="},
                {status, on}
              ]}

            ]},


            %% Setting captcha backend
            {backend_settings, [
                {captcha, [
                    {provider, {{ .Values.global.capi.captcha_provider }} },
                    {key, <<"${capi_backend_captcha_key}">>},
                    {verify_url, "{{ .Values.global.capi.captcha_verify_url | default "https://www.google.com/recaptcha/api/siteverify" }}" },
                    {disabled, {{ .Values.global.capi.capi_front_captcha_disabled }} }
                ]}
            ]},

            %% sending metrics to zabbix
            {zabbix, [
                {server, "localhost"},
                {src_host, "corezoid"},
                {send_interval, 5},
                {disabled, true}
            ]},

            {sender, [
                %% sender communication
                {sender_build_form_url, ""}, %% for build form url
                {sender_build_action_url, ""}, %% for action url
                {sender_call_action_url, ""}, %% for call action url
                {sender_secret, <<"">>},
                {sender_plugin_secret, <<"">>},
                {sender_max_threads, 25 },
                {sender_env, <<"md">>}
            ]},

            %% example {allowed_domains, ["gmail.com", "corezoid.com", "github.com"]},
            {{- if .Values.global.capi.registration_restriction.enable }}
            {allowed_domains, [{{- range .Values.global.capi.registration_restriction.allowed_domains  }} {{ . | quote }},{{- end }} "{{ .Values.global.domain }}" ]},
            {{- end }}

            %%    % group for super_users
            %%    %% superusers are users who can get extra privs to simple user
            %%    %% DD move to table
            {super_admin_id, 1},

            % api limit counters
            {user_limits, [
                {interface, {{ .Values.global.capi.user_limits_interface | default 120 }}},
                {max_user_rate, {{ .Values.global.capi.user_limits_max_user_rate | default 100 }}}
            ]},

            {logic_settings, [
                {api, [
                    {max_threads, {{ .Values.global.capi.logic_settings.api_max_thread | default 200 }}}
                ]},
                {sender_api, [
                    {max_threads, {{ .Values.global.capi.logic_settings.api_max_thread | default 25 }}}
                ]},
                {timer, [
                    {default, [
                        {timer_min, {{ .Values.global.capi.logic_settings.timer_default | default 30 }}}
                    ]}
                ]}
            ]}
        ]},

        %% sending metrics to zabbix
        {zabbix_sender, [
            {zabbix_host, "localhost"},
            {zabbix_port, 10051},
            {nodename, "corezoid"},
            {disabled, true}
        ]},

          {corezoid_fs, [

            {profiles, [

              %% profile name for maret schemas
              [
                {name, schemas}, %% Storage for process schemas, stored in marketplace

                %% switch between storages
                {default_file_storage, file_f3},

                %% f3 file storage settings
                {file_f3,[
                  {allowed_namespaces, ["avatars"]},
                  {path_to_dir, "/tmp"}, %% todo
                  {network_partition, false},     %% Monitor network share process (if true -> grep PATH_TO_DIR /proc/mounts)
                  {ttl_file, 60}                 %% file ttl in seconds
                ]}
              ],

              %% profile name for avatars
              [
                {name, avatars}, %% Storage for users avatars
                %% switch between storages
                {default_file_storage, file_f3},

                %% f3 file storage settings
                {file_f3,[
                  {allowed_namespaces, ["avatars"]},
                  {path_to_dir, "/tmp"}, %% todo
                  {network_partition, false},     %% Monitor network share process (if true -> grep PATH_TO_DIR /proc/mounts)
                  {ttl_file, 60}                 %% file ttl in seconds
                ]}

              ]

              %% maybe more profiles ...
            ]}

          ]},





        {lager, [
            %% What handlers to install with what arguments

            {log_root, "/ebsmnt/erlang/capi/log"},
            {handlers, [ {lager_console_backend, {{ .Values.global.log_level | default "info" }} } ]},
            %% What colors to use with what log levels
            {colored, true},
            {colors, [
                {debug,     "\e[0;38m" },
                {info,      "\e[1;37m" },
                {notice,    "\e[1;36m" },
                {warning,   "\e[1;33m" },
                {error,     "\e[1;31m" },
                {critical,  "\e[1;35m" },
                {alert,     "\e[1;44m" },
                {emergency, "\e[1;41m" }
            ]},
            %% Whether to write a crash log, and where. Undefined means no crash logger.
            {crash_log, "crash.log"},
            %% Maximum size in bytes of events in the crash log - defaults to 65536
            {crash_log_msg_size, 65536},
            %% Maximum size of the crash log in bytes, before its rotated, set
            %% to 0 to disable rotation - default is 0
            {crash_log_size, 10485760},
            %% What time to rotate the crash log - default is no time
            %% rotation. See the README for a description of this format.
            {crash_log_date, "$D0"},
            %% Number of rotated crash logs to keep, 0 means keep only the
            %% current one - default is 0
            {crash_log_count, 5},
            %% Whether to redirect error_logger messages into lager - defaults to true
            {error_logger_redirect, true},
            %% How many messages per second to allow from error_logger before we start dropping them
            {error_logger_hwm, 50},
            %% How big the gen_event mailbox can get before it is switched into sync mode
            {async_threshold, 20},
            %% Switch back to async mode, when gen_event mailbox size decrease from `async_threshold'
            %% to async_threshold - async_threshold_window
            {async_threshold_window, 5}
        ]},

        {account_sdk, [
        {{- if not .Values.global.sa.enabled }}
            {disabled, true}
        {{- else }}
            {pool, [
                {host, "{{ .Values.global.sa_web.subdomain }}.{{ .Values.global.domain }}"},
                {port, 443},
                {start_size, 10},
                {min_size, 10},
                {max_size, 10}
            ]},
            {disabled, false},
            {client_id, "5dca7de57837d70001000006"},
            {client_secret, "ZY8bwLJDYouuApi2ENxlup6kqShnhk3U"},
            {return_url, "https://{{ .Values.global.subdomain }}.{{ .Values.global.domain }}/auth2/single_account/return/"},
            {oauth_url, "https://{{ .Values.global.sa_web.subdomain }}.{{ .Values.global.domain }}/oauth2/authorize"},
            {token_url, "https://{{ .Values.global.sa_web.subdomain }}.{{ .Values.global.domain }}/oauth2/token"},
            {userinfo_url, "https://{{ .Values.global.sa_web.subdomain }}.{{ .Values.global.domain }}/oauth2/userinfo?access_token="}
        {{- end }}
        ]}

        ].

kind: ConfigMap
metadata:
  name: {{ .Values.appName }}-config
