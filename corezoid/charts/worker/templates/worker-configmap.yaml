apiVersion: v1
data:
  worker.config: |
    [
        {limits_client, [
            {redis, [
                [
    {{- if eq .Values.global.redis.sentinel.enable  true }}
                    {sentinel_master_name, "{{ .Values.global.redis.sentinel.master_name }}"}, %% From redis_sentinel master_name
                    {{- if eq .Values.global.redis.tls.enabled true }}
                    {ssl, [
                      {tls, true}
                    ]},
                    {{- end }}
    {{- else }}
                    {{- if eq .Values.global.redis.internal false }}
                    {host, "${REDIS_HOST}"},
                    {instance_type, {{ .Values.global.redis.redistype | default "redis" }}}, %% by default redis.
                    {port, ${REDIS_PORT}},
                    {password,"${REDIS_PASSWORD}"},
                    {{- if eq .Values.global.redis.tls.enabled true }}
                      {ssl, [
                        {tls, true}
                      ]},
                    {{- end }}
                    {{- else }}
                    {host, "redis-master"},
                    {instance_type, {{ .Values.global.redis.redistype | default "redis" }}}, %% by default redis.
                    {port, 6379},
                    {password,""},
                    {{- end }}
    {{- end }}
                    {database, 9},
                    {start_size, 1},
                    {min_size, 1},
                    {max_size, 50}
                ]
            ]}
        ]},
      {conv_params, [
        {min_version, 2} %% application should deny creating task (copy/rpc) if params are not valid.
        %% We have in database conveyor table conveyors field version. If version in DB >= min_version in config we run validator else ignore.
      ]},

      {is_ready, [
          {port, 8385},
          {enabled, true}
      ]},

        {mw_metrics, [
          {is_enabled, true},
          {subsystems, [erlprometheus]}
        ]},

        {erlprometheus, [
          {host, {0,0,0,0}},
          {port, 9100}
        ]},

      {corezoid_counters_internal, [
        {node_counters, [
              {driver,  {{ .Values.global.redis.corezoid_counters_driver | default "redis" }} }, %% postgres | redis
              {driver_redis, [[
              {{- if eq .Values.global.redis.sentinel.enable  true }}
                {sentinel_master_name, "{{ .Values.global.redis.sentinel.master_name }}"}, %% From redis_sentinel master_name
              {{- else }}
                {host, "${REDIS_HOST}"},
                {port, ${REDIS_PORT}},
                {password,"${REDIS_PASSWORD}"},
                {{- if eq .Values.global.redis.tls.enabled true }}
                {ssl, [
                  {tls, true}
                ]},
                {{- end }}
              {{- end }}
                {database, 1},
                {start_size, 5},
                {min_size, 5},
                {max_size, 50}
              ]]},
              {driver_postgres, [
              {{- if .Values.global.db.bouncer }}
                {host, "pgbouncer-service"},
              {{- else }}
                {host, "${POSTGRES_DBHOST}"},
              {{- end }}
                {user, "${POSTGRES_DBUSER}"},
                {dbname, "corezoid_counters"},
                {password, "${POSTGRES_DBPWD}"},
                {start_size, 5},
                {min_size, 5},
                {max_size, 50}
              ]}
            ]},
            {api_sum_logic, [
              {driver, {{ .Values.global.redis.corezoid_counters_driver | default "redis" }} }, %% postgres | redis
              {driver_redis, [[
              {{- if eq .Values.global.redis.sentinel.enable  true }}
                {sentinel_master_name, "{{ .Values.global.redis.sentinel.master_name }}"}, %% From redis_sentinel master_name
              {{- else }}
                {host, "${REDIS_HOST}"},
                {port, ${REDIS_PORT}},
                {password,"${REDIS_PASSWORD}"},
                {{- if eq .Values.global.redis.tls.enabled true }}
                {ssl, [
                  {tls, true}
                ]},
                {{- end }}
              {{- end }}
                {database, 2},
                {start_size, 5},
                {min_size, 5},
                {max_size, 50}
              ]]},
              {driver_postgres, [
              {{- if .Values.global.db.bouncer }}
                {host, "pgbouncer-service"},
              {{- else }}
                {host, "${POSTGRES_DBHOST}"},
              {{- end }}
                {user, "${POSTGRES_DBUSER}"},
                {dbname, "corezoid_counters"},
                {password, "${POSTGRES_DBPWD}"},
                {start_size, 5},
                {min_size, 5},
                {max_size, 50}
              ]}
            ]}
      ]},

       {corezoid_global_storage, [
           {backend, redis}, %% maybe if future list will increase
           {redis, [
    {{- if eq .Values.global.redis.sentinel.enable  true }}
               {sentinel_master_name, "{{ .Values.global.redis.sentinel.master_name }}"}, %% From redis_sentinel master_name
               {{- if eq .Values.global.redis.tls.enabled true }}
                 {ssl, [
                   {tls, true}
                 ]},
               {{- end }}
    {{- else }}
           {{- if eq .Values.global.redis.internal false }}
               {host, "${REDIS_HOST}"},
               {instance_type, {{ .Values.global.redis.redistype | default "redis" }}}, %% by default redis.
               {port, ${REDIS_PORT}},
               {password,"${REDIS_PASSWORD}"},
               {{- if eq .Values.global.redis.tls.enabled true }}
                 {ssl, [
                   {tls, true}
                 ]},
               {{- end }}
           {{- else }}
               {host, "redis-master"},
               {instance_type, {{ .Values.global.redis.redistype | default "redis" }}}, %% by default redis.
               {port, 6379},
               {password,""},
           {{- end }}
    {{- end }}
               {database, 9}
           ]}
       ]},

       {corezoid_license_client, [
          {driver, "{{ .Values.global.capi.licensepath | default "db" }}" },
          {pgsql, [
              {host, "${POSTGRES_DBHOST}"},
              {user, "${POSTGRES_DBUSER}"},
              {dbname, "settings"},
              {password, "${POSTGRES_DBPWD}"}
          ]},
          {path_to_license, "/ebsmnt/certs/corezoid_license"}
        ]},

       {gen_rpc, [
         {tcp_server_port, false}
       ]},

       {corezoid_global_stats, [
         {disabled, true}
       ]},

    {{- if eq .Values.global.redis.sentinel.enable true }}
      {redis_sentinel, [
          {servers, [
            [
              {master_name, "{{ .Values.global.redis.sentinel.master_name }}"},     %% name of master redis santinel
              {redis_password, "${REDIS_PASSWORD}"},        %% Used for connect to redis          (optional) if empty can remove
              {sentinel_password, "${REDIS_PASSWORD}"},  %% Used for connect to redis sentinel (optional) if empty can remove
              {sentinels, [
                [
                  {{- if eq .Values.global.redis.tls.enabled true }}
                  {ssl, [
                     {tls, true}
                  ]},
                  {{- end }}
                  {host, "${REDIS_HOST}"},
                  {port, ${REDIS_PORT}}
                ]
              ]}
            ]
          ]}
        ]},
    {{- end }}


      %% for clustering components
      {corezoid_cluster, [
          {backend, redis}, %% maybe if future list will increase
          {redis, [
    {{- if eq .Values.global.redis.sentinel.enable  true }}
              {sentinel_master_name, "{{ .Values.global.redis.sentinel.master_name }}"}, %% From redis_sentinel master_name
              {{- if eq .Values.global.redis.tls.enabled true }}
              {ssl, [
                {tls, true}
              ]},
              {{- end }}
    {{- else }}
        {{- if eq .Values.global.redis.internal false }}
              {host, "${REDIS_HOST}"},
              {instance_type, {{ .Values.global.redis.redistype | default "redis" }}}, %% by default redis.
              {port, ${REDIS_PORT}},
              {password,"${REDIS_PASSWORD}"},
              {{- if eq .Values.global.redis.tls.enabled true }}
                {ssl, [
                  {tls, true}
                ]},
              {{- end }}
        {{- else }}
              {host, "redis-master"},
              {instance_type, {{ .Values.global.redis.redistype | default "redis" }}}, %% by default redis.
              {port, 6379},
              {password,""},
        {{- end }}
    {{- end }}
              {database, 10}
          ]}
      ]},

        {ermql, [

            {publish_request, [
            {servers, [
            {{- if hasKey .Values.global "mq_http" }}
                [
                  {host, "${MQ_HTTP_HOST}"},
                  {port, ${MQ_HTTP_PORT}},
                  {username, <<"${MQ_HTTP_USERNAME}">>},
                  {password, <<"${MQ_HTTP_PASSWORD}">>},
                  {{- if eq .Values.global.mq.tls.enabled true }}
                    {ssl, [
                      {tls, true}
                    ]},
                  {{- end }}
                  {vhost, <<"${MQ_HTTP_VHOST}">>}
                ],
                [
                  {host, "${MQ_HOST}"},
                  {port, ${MQ_HTTP_PORT}},
                  {username, <<"${MQ_USERNAME}">>},
                  {password, <<"${MQ_PASSWORD}">>},
                  {vhost, <<"${MQ_VHOST}">>},
                  {{- if eq .Values.global.mq.tls.enabled true }}
                    {ssl, [
                      {tls, true}
                    ]},
                  {{- end }}
                  {pools, [dbcall]}
                ]
            {{- else }}
      {{- if eq .Values.global.mq.internal false }}
                [
                {host, "${MQ_HOST}"},
                {port, ${MQ_PORT}},
                {username, <<"${MQ_USERNAME}">>},
                {password, <<"${MQ_PASSWORD}">>},
                {{- if eq .Values.global.mq.tls.enabled true }}
                  {ssl, [
                    {tls, true}
                  ]},
                {{- end }}
                {vhost, <<"${MQ_VHOST}">>}
              ],
              [
                {host, "${MQ_HOST}"},
                {port, ${MQ_PORT}},
                {username, <<"${MQ_USERNAME}">>},
                {password, <<"${MQ_PASSWORD}">>},
                {vhost, <<"${MQ_VHOST}">>},
                {{- if eq .Values.global.mq.tls.enabled true }}
                  {ssl, [
                    {tls, true}
                  ]},
                {{- end }}
                {pools, [dbcall]}
              ]
      {{- else }}
                [
                {host, "rabbit-service"},
                {port, 5672},
                {username, <<"${MQ_USERNAME}">>},
                {password, <<"${MQ_PASSWORD}">>},
                {vhost, <<"${MQ_VHOST}">>}
              ],
              [
                {host, "rabbit-service"},
                {port, 5672},
                {username, <<"${MQ_USERNAME}">>},
                {password, <<"${MQ_PASSWORD}">>},
                {vhost, <<"${MQ_VHOST}">>},
                {pools, [dbcall]}
              ]
      {{- end }}
      {{- end }}
            ]},
              {queues_count, 1},
              {min_size, 1},
              {max_size, 1},
              {start_size, 1}
            ]},

            {consumer_response, [
            {servers, [
              {{- if hasKey .Values.global "mq_http" }}
                  [
                    {host, "${MQ_HTTP_HOST}"},
                    {port, ${MQ_HTTP_PORT}},
                    {username, <<"${MQ_HTTP_USERNAME}">>},
                    {password, <<"${MQ_HTTP_PASSWORD}">>},
                    {{- if eq .Values.global.mq.tls.enabled true }}
                      {ssl, [
                        {tls, true}
                      ]},
                    {{- end }}
                    {vhost, <<"${MQ_HTTP_VHOST}">>}
                  ],
                  [
                    {host, "${MQ_HOST}"},
                    {port, ${MQ_HTTP_PORT}},
                    {username, <<"${MQ_USERNAME}">>},
                    {password, <<"${MQ_PASSWORD}">>},
                    {vhost, <<"${MQ_VHOST}">>},
                    {{- if eq .Values.global.mq.tls.enabled true }}
                      {ssl, [
                        {tls, true}
                      ]},
                    {{- end }}
                    {pools, [dbcall]}
                  ]
              {{- else }}
    {{- if eq .Values.global.mq.internal false }}
                  [
                    {host, "${MQ_HOST}"},
                    {port, ${MQ_PORT}},
                    {username, <<"${MQ_USERNAME}">>},
                    {password, <<"${MQ_PASSWORD}">>},
                    {{- if eq .Values.global.mq.tls.enabled true }}
                      {ssl, [
                        {tls, true}
                      ]},
                    {{- end }}
                    {vhost, <<"${MQ_VHOST}">>}
                ],
                [
                    {host, "${MQ_HOST}"},
                    {port, ${MQ_PORT}},
                    {username, <<"${MQ_USERNAME}">>},
                    {password, <<"${MQ_PASSWORD}">>},
                    {vhost, <<"${MQ_VHOST}">>},
                    {{- if eq .Values.global.mq.tls.enabled true }}
                      {ssl, [
                        {tls, true}
                      ]},
                    {{- end }}
                    {pools, [dbcall]}
                ]
    {{- else }}
                  [
                    {host, "rabbit-service"},
                    {port, 5672},
                    {username, <<"${MQ_USERNAME}">>},
                    {password, <<"${MQ_PASSWORD}">>},
                    {vhost, <<"${MQ_VHOST}">>}
                ],
                [
                    {host, "rabbit-service"},
                    {port, 5672},
                    {username, <<"${MQ_USERNAME}">>},
                    {password, <<"${MQ_PASSWORD}">>},
                    {vhost, <<"${MQ_VHOST}">>},
                    {pools, [dbcall]}
                ]
    {{- end }}
    {{- end }}
            ]},
              {connections_per_queue, 1},
              {channels_per_connection, 1},
              {messages_prefetch_size_per_channel, 50}
            ]}
        ]},

        %% dns cache. Support multiply dnses cache
        %% name - unical name will be able to use in publish/consumer rabbitmq instead of server name
        %% dns - DNS name
        %% ns - NS name
        %% ttl - auto reload info from DNS server (in seconds)

        {dns_cache, [
          {servers, [
          [
            {name, main},
          {{- if eq .Values.global.mq.internal false }}
            {dns, "${MQ_HOST}"},
          {{- else }}
            {dns, "rabbit-service"},
          {{- end }}
            {ttl, 60}
          ],
          [
            {name, name5},
          {{- if eq .Values.global.mq.internal false }}
            {dns, "${MQ_HOST}"},
          {{- else }}
            {dns, "rabbit-service"},
          {{- end }}
            {ttl, 60}
          ]
          ]}
        ]},

        {corezoid_queues_gc, [
          {enabled, true},
          {{- if hasKey .Values.global "mq_http" }}
          {host, "${MQ_HTTP_HOST}"},
          {port, 15672 },
          {login, "${MQ_HTTP_USERNAME}"},
          {password, "${MQ_HTTP_PASSWORD}"},
          {{- else }}
          {{- if eq .Values.global.mq.internal false }}
          {host, "${MQ_HOST}"},
          {port, 15672},
          {login, "${MQ_USERNAME}"},
          {password, "${MQ_PASSWORD}"},
          {{- else }}
          {host, "rabbit-service"},
          {port, 15672},
          {login, "${MQ_USERNAME}"},
          {password, "${MQ_PASSWORD}"},
          {{- end }}
          {{- end }}
          {vhost, "${MQ_VHOST}"},
          {gc_queues_regexp, [
            "settings", "worker.ctrl",
            "^to_worker_[0-9]{1,3}\.(?:cce\\(|git_call\\(|es_call\\()\(?:.[^\)]+\).+$",
            "conf_agent_client_queue_worker", "ermql_license_distributor_request_worker", "mw_component_version_client_queue_worker", "env_vars_queue_worker", "limits_client_queue_worker"
          ]}
        ]},

      %% Envirement Variable
      {env_var, [
          %% - psql pool -
          {psql, [
              {host, "${POSTGRES_DBHOST}"},
              {dbname, "conveyor"},
              {user, "${POSTGRES_DBUSER}"},
              {port, 5432},
              {password, "${POSTGRES_DBPWD}"},
              %% pool size
              {start_size, {{ .Values.global.worker.psql_start_size | default 1 }}},
              {min_size, {{ .Values.global.worker.psql_min_size | default 1 }}},
              {max_size, {{ .Values.global.worker.psql_max_size | default 10 }}}
          ]}
      ]},

      {enigma, [
        {is_enabled, {{ .Values.global.enigma.enabled }}},
        {private_key_id, "{{ .Values.global.enigma.key_manager.enigma_pk_id }}"},
        {key_manager_host, "http://enigma-key-manager-service:8080"},
        {rotors_pool, [
          {min_size, 3},
          {max_size, 50},
          {start_size, 3}
        ]}
      ]},

    {{- if eq .Values.global.dbcall.enabled true }}
          {mw_db_call, [
              {version, 2},
              {enabled, true},
              {request_amqp_v2, [
    {{- if eq .Values.global.mq.internal false }}
                {host, <<"${MQ_HOST}">>},
                {port, ${MQ_PORT}},
                {username, <<"${MQ_USERNAME}">>},
                {password, <<"${MQ_PASSWORD}">>},
                {{- if eq .Values.global.mq.tls.enabled true }}
                  {ssl, [
                    {tls, true}
                  ]},
                {{- end }}
                {vhost, <<"${MQ_VHOST}">>},
    {{- else }}
                {host, <<"rabbit-service">>},
                {port, 5672},
                {username, <<"${MQ_USERNAME}">>},
                {password, <<"${MQ_PASSWORD}">>},
                {vhost, <<"${MQ_VHOST}">>},
    {{- end }}
                {exchange, <<"">>}
              ]}
          ]},
    {{- end }}

      { worker,
        [
        %% server id
        %% It's important to be unique
        { worker_id, <<"">> },
    {{- if eq .Values.global.worker.worker_write_history_task false }}
        {worker_write_history_task, false},
    {{- else }}
        {worker_write_history_task, true},
    {{- end }}
        {prometheus_metrics, {{ .Values.global.prometheus_metrics | default false }}  },
        {use_limits_from_server, {{ .Values.global.use_limits_from_server | default false }}},
        {{- if .Values.global.enigma.encryption }}
        %% for ENCRYPT/DECRYPT data
        {encrypt_decrypt, [
           queue, %% now it's encode-decode RabbitMQ
           cache, %% Redis
           db     %% PostgreSQL
        ]},
        {{- end }}

        %% temporary
        {copy_task_validate_ref, true},

        {nodes, [
          ''
        ]},

        %% max allowed task_size in bytes
        %% if you what increase this limit
        %% be careful, you'll do it at your own risk

        %% max task size for process conv
        {max_task_size_for_process_conv, {{ .Values.global.capi.max_task_size_for_process_conv | default 512000 }} },

        %% max task size for state diagramm conv
        {max_task_size_for_st_diagramm_conv, {{ .Values.global.capi.max_task_size_for_st_diagramm_conv | default 512000 }} },

        %% sequence of shard numbers
        %% if you want to distribute the workload
        %% between several workers
        %% you can switch any part of this numbers to
        %% another application
        { shards, [{{- $lastIndex := sub (len .Values.global.db.shards) 1}}
          {{- range $i, $e := .Values.global.db.shards }}
          {{- $i }}{{- if ne $i $lastIndex -}}, {{ end }} {{- end }}] },

        %% shard's number
        %% it depends on the real shards number in DB
        %% or DB mappings in pgbouncer
        { shards_count, {{ .Values.global.db.shards_count | default 10 }} },

        %% swtich on\off timer logic execution on start worker app
        %% if "false" timers won't work
        { timer_auto_init, true },

        {type_storage, persistent}, %% persistent | memory

        %% this param needs to dynamically create public callback url in constructions:
        %% conv[ID].node[Node].public_callback_corezoid
        %% conv[ID].node[Node].public_callback_mandrill
        %% node[Node].public_callback_corezoid
        %% node[Node].public_callback_corezoid
        %% It should be in binary format
        {public_callback_prefix, <<"https://{{ .Values.global.subdomain }}.{{ .Values.global.domain }}">>},

        {timer_db_process_workers_per_shard_length, {{ .Values.global.worker.timer_db_process_workers_per_shard_length | default 1 }}},  %% Number of workers per shard used for database operations to fetch tasks
        {timer_ring_workers_per_shard_length, {{ .Values.global.worker.timer_ring_workers_per_shard_length | default 10 }}},       %% Number of processes per shard that will handle timers

        %% DB settings
        { pgsql,
          [
            { host, "${POSTGRES_DBHOST}" },
            { hosts, [
              { [{{- $lastIndex := sub (len .Values.global.db.shards) 1}}
          {{- range $i, $e := .Values.global.db.shards }}
          {{- $i }}{{- if ne $i $lastIndex -}}, {{ end }} {{- end }}], "${POSTGRES_DBHOST}" }
            ]},
            { user, "${POSTGRES_DBUSER}" },
            { password, "${POSTGRES_DBPWD}" },
            { dbname, "conveyor" },
            { start_size, {{ .Values.global.worker.pgsql_start_size | default 0 }} },
            { min_size, {{ .Values.global.worker.pgsql_min_size | default 0 }} },
            { max_size, {{ .Values.global.worker.pgsql_max_size | default 50 }} }
          ]
        },

        % postgresql settings for statistics db
        {pgsql_statistics, [
          {host, "${POSTGRES_DBHOST}"},
          {user, "${POSTGRES_DBUSER}"},
          {password, "${POSTGRES_DBPWD}"},
          {dbname, "conveyor_statistics"},
          {min_size, {{ .Values.global.worker.pgsql_statistics_min_size | default 0 }}},
          {max_size, {{ .Values.global.worker.pgsql_statistics_max_size | default 25 }}},
          {start_size, {{ .Values.global.worker.pgsql_statistics_start_size | default 2 }}}
        ]},

        {statistics, true},    % true|false for enable or disable statistic workers by default is true

        %%  postgresql archive db
        { pgsql_archive, [
            { hosts, [
              { [{{- $lastIndex := sub (len .Values.global.db.shards) 1}}
          {{- range $i, $e := .Values.global.db.shards }}
          {{- $i }}{{- if ne $i $lastIndex -}}, {{ end }} {{- end }}], "${POSTGRES_DBHOST}" }
            ]},
            { user, "${POSTGRES_DBUSER}" },
            { password, "${POSTGRES_DBPWD}" },
            { start_size, {{ .Values.global.worker.pgsql_archive_start_size | default 1 }} },
            { min_size, {{ .Values.global.worker.pgsql_archive_min_size | default 0 }} },
            { max_size, {{ .Values.global.worker.pgsql_archive_max_size | default 25 }} }
          ]},

        %% for custom db-s
        { pgsql2, [] },

           {pgsql_task_history, [
                          {host, "${POSTGRES_DBHOST}"},
                              %% hosts - tasks, settings of nodes
                              {hosts, [
                              { [{{- $lastIndex := sub (len .Values.global.db.shards) 1}}
        {{- range $i, $e := .Values.global.db.shards }}
        {{- $i }}{{- if ne $i $lastIndex -}}, {{ end }} {{- end }}], "${POSTGRES_DBHOST}" }
                    ]},
                { user, "${POSTGRES_DBUSER}" },
                { password, "${POSTGRES_DBPWD}" },
                {min_size, {{ .Values.global.worker.pgsql2_min_size | default 0 }}},
                {max_size, {{ .Values.global.worker.pgsql2_max_size | default 50 }}},
                {start_size, {{ .Values.global.worker.pgsql2_start_size | default 3 }}}
            ]},
        {write_data_to_history, {{ .Values.global.worker.write_data_to_history | default false }} }, %% true|false - write or not tasks data into table
        %% redis sentinel quorum hosts
        {sentinels, []},

        %% persistent storage for different counters
        %% please don't forget about backup of this data
        { redis, [
          [
    {{- if eq .Values.global.redis.sentinel.enable  true }}
                    {sentinel_master_name, "{{ .Values.global.redis.sentinel.master_name }}"}, %% From redis_sentinel master_name
                    {{- if eq .Values.global.redis.tls.enabled true }}
                    {ssl, [
                      {tls, true}
                    ]},
                    {{- end }}
    {{- else }}
          {{- if eq .Values.global.redis.internal false }}
            {host, "${REDIS_HOST}"},
            {instance_type, {{ .Values.global.redis.redistype | default "redis" }}}, %% by default redis.
            {port, ${REDIS_PORT}},
            {password,"${REDIS_PASSWORD}"},
            {{- if eq .Values.global.redis.tls.enabled true }}
              {ssl, [
                {tls, true}
              ]},
            {{- end }}
          {{- else }}
            {host, "redis-master"},
            {instance_type, {{ .Values.global.redis.redistype | default "redis" }}}, %% by default redis.
            {port, 6379},
            {password,""},
          {{- end }}
    {{- end }}
            {database,1},
            {start_size, {{ .Values.global.worker.redis_start_size | default 5 }}},
            {min_size, {{ .Values.global.worker.redis_min_size | default 5 }}},
            {max_size, {{ .Values.global.worker.redis_max_size | default 50 }}}
          ]
        ]},

        %% persistent storage for api_sum counters
        %% please don't forget about backup of this data
        { redis_api_sum, [
          [
    {{- if eq .Values.global.redis.sentinel.enable  true }}
                    {sentinel_master_name, "{{ .Values.global.redis.sentinel.master_name }}"}, %% From redis_sentinel master_name
                    {{- if eq .Values.global.redis.tls.enabled true }}
                    {ssl, [
                      {tls, true}
                    ]},
                    {{- end }}
    {{- else }}
          {{- if eq .Values.global.redis.internal false }}
            {host, "${REDIS_HOST}"},
            {instance_type, {{ .Values.global.redis.redistype | default "redis" }}}, %% by default redis.
            {port, ${REDIS_PORT}},
            {password,"${REDIS_PASSWORD}"},
            {{- if eq .Values.global.redis.tls.enabled true }}
              {ssl, [
                {tls, true}
              ]},
            {{- end }}
          {{- else }}
            {host, "redis-master"},
            {instance_type, {{ .Values.global.redis.redistype | default "redis" }}}, %% by default redis.
            {port, 6379},
            {password,""},
          {{- end }}
    {{- end }}
            {database,2},
            {start_size, {{ .Values.global.worker.redis_api_sum_start_size | default 5 }}},
            {min_size, {{ .Values.global.worker.redis_api_sum_min_size | default 5 }}},
            {max_size, {{ .Values.global.worker.redis_api_sum_max_size | default 50 }}}
          ]
        ]},

        %% cache, nonpersistent storage, keys will expire after N hours
        { redis2, [
          [
    {{- if eq .Values.global.redis.sentinel.enable  true }}
                    {sentinel_master_name, "{{ .Values.global.redis.sentinel.master_name }}"}, %% From redis_sentinel master_name
                    {{- if eq .Values.global.redis.tls.enabled true }}
                    {ssl, [
                      {tls, true}
                    ]},
                    {{- end }}
    {{- else }}
          {{- if eq .Values.global.redis.internal false }}
            {host, "${REDIS_HOST_CACHE}"},
            {instance_type, {{ .Values.global.redis.redistype | default "redis" }}}, %% by default redis.
            {port, ${REDIS_PORT_CACHE}},
            {password,"${REDIS_PASSWORD_CACHE}"},
            {{- if eq .Values.global.redis.tls.enabled true }}
              {ssl, [
                {tls, true}
              ]},
            {{- end }}
          {{- else }}
            {host, "redis-master"},
            {instance_type, {{ .Values.global.redis.redistype | default "redis" }}}, %% by default redis.
            {port, 6379},
            {password,""},
          {{- end }}
    {{- end }}
            {database,3},
            {start_size, {{ .Values.global.worker.redis2_start_size | default 5 }}},
            {min_size, {{ .Values.global.worker.redis2_min_size | default 5 }}},
            {max_size, {{ .Values.global.worker.redis2_max_size | default 100 }}}
          ]
        ]},

        %% memory redis for timer calls
        %% these servers store timers in whole system
        {redis_timers, [
          [
    {{- if eq .Values.global.redis.sentinel.enable  true }}
                    {sentinel_master_name, "{{ .Values.global.redis.sentinel.master_name }}"}, %% From redis_sentinel master_name
                    {{- if eq .Values.global.redis.tls.enabled true }}
                    {ssl, [
                      {tls, true}
                    ]},
                    {{- end }}
    {{- else }}
          {{- if eq .Values.global.redis.internal false }}
            {host, "${REDIS_HOST_TIMERS}"},
            {instance_type, {{ .Values.global.redis.redistype | default "redis" }}}, %% by default redis.
            {port, ${REDIS_PORT_TIMERS}},
            {password,"${REDIS_PASSWORD_TIMERS}"},
            {{- if eq .Values.global.redis.tls.enabled true }}
              {ssl, [
                {tls, true}
              ]},
            {{- end }}
          {{- else }}
            {host, "redis-master"},
            {instance_type, {{ .Values.global.redis.redistype | default "redis" }}}, %% by default redis.
            {port, 6379},
            {password,""},
          {{- end }}
    {{- end }}
            {database,4},
            {start_size, {{ .Values.global.worker.redis_timers_start_size | default 5 }}},
            {min_size, {{ .Values.global.worker.redis_timers_min_size | default 5 }}},
            {max_size, {{ .Values.global.worker.redis_timers_max_size | default 50 }}}
          ]
        ]},

        %% cache size in redis2
        {redis2_ttl, {{ .Values.global.worker.redis2_ttl | default 43200 }}},


        %%These section to publish tasks in rabbitmq
        {publish_unload_archive_task, [
                {servers, [
          {{- if eq .Values.global.mq.internal false }}
                      [
                        {host, "${MQ_HOST}"},
                        {port, ${MQ_PORT}},
                        {username, <<"${MQ_USERNAME}">>},
                        {password, <<"${MQ_PASSWORD}">>},
                        {{- if eq .Values.global.mq.tls.enabled true }}
                          {ssl, [
                            {tls, true}
                          ]},
                        {{- end }}
                        {vhost, <<"${MQ_VHOST}">>}
                    ]
          {{- else }}
                      [
                        {host, "rabbit-service"},
                        {port, 5672},
                        {username, <<"${MQ_USERNAME}">>},
                        {password, <<"${MQ_PASSWORD}">>},
                        {vhost, <<"${MQ_VHOST}">>}
                    ]
          {{- end }}
                ]},
          {min_size, {{ .Values.global.worker.publish_unload_archive_task_min_size | default 5 }}},
          {max_size, {{ .Values.global.worker.publish_unload_archive_task_max_size | default 5 }}},
          {start_size, {{ .Values.global.worker.publish_unload_archive_task_start_size | default 5 }}}
        ]},

        %% These section to consume tasks in rabbitmq
        %% It's important to divide messages_prefetch_size_per_channel / workers without
        %% without a floating point.
        %% Examples: 500 / 10 - good
        %% 500 / 15 - bad.
        {consumer_unload_archive_task, [
                {servers, [
          {{- if eq .Values.global.mq.internal false }}
                      [
                        {host, "${MQ_HOST}"},
                        {port, ${MQ_PORT}},
                        {username, <<"${MQ_USERNAME}">>},
                        {password, <<"${MQ_PASSWORD}">>},
                        {{- if eq .Values.global.mq.tls.enabled true }}
                          {ssl, [
                            {tls, true}
                          ]},
                        {{- end }}
                        {vhost, <<"${MQ_VHOST}">>}
                    ]
          {{- else }}
                      [
                        {host, "rabbit-service"},
                        {port, 5672},
                        {username, <<"${MQ_USERNAME}">>},
                        {password, <<"${MQ_PASSWORD}">>},
                        {vhost, <<"${MQ_VHOST}">>}
                    ]
          {{- end }}
                ]},
          {connections_per_queue, 2},   %% The specified number of tcp connections will be created for each queue
          {channels_per_connection, 1},   %% Virtual connections for one connections_per_queue
          {messages_prefetch_size_per_channel, 1000},    %% The number of queues within the channel
          {workers, 20}
          %% connections_per_queue * channels_per_connection * messages_prefetch_size_per_channel % workers = batch size per worker
        ]},

        %% Logic copy task producer
        %% deprecated, producer of copy_task requests
        {publish_copy_task_request, [
                {servers, [
          {{- if eq .Values.global.mq.internal false }}
                      [
                        {host, "${MQ_HOST}"},
                        {port, ${MQ_PORT}},
                        {username, <<"${MQ_USERNAME}">>},
                        {password, <<"${MQ_PASSWORD}">>},
                        {{- if eq .Values.global.mq.tls.enabled true }}
                          {ssl, [
                            {tls, true}
                          ]},
                        {{- end }}
                        {vhost, <<"${MQ_VHOST}">>}
                    ]
          {{- else }}
                      [
                        {host, "rabbit-service"},
                        {port, 5672},
                        {username, <<"${MQ_USERNAME}">>},
                        {password, <<"${MQ_PASSWORD}">>},
                        {vhost, <<"${MQ_VHOST}">>}
                    ]
          {{- end }}
                ]},
          {queues_count, {{ .Values.global.worker.publish_copy_task_request_queues_count | default 1 }}},
          {min_size, {{ .Values.global.worker.publish_copy_task_request_min_size | default 1 }}},
          {max_size, {{ .Values.global.worker.publish_copy_task_request_max_size | default 5 }}},
          {start_size, {{ .Values.global.worker.publish_copy_task_request_start_size | default 1 }}}
          %%{is_sharded, true} %% Legacy: will be removed
        ]},

        %% deprecated, consumer for responses of copy_tasks
        {consumer_copy_task_response, [
                {servers, [
          {{- if eq .Values.global.mq.internal false }}
                      [
                        {host, "${MQ_HOST}"},
                        {port, ${MQ_PORT}},
                        {username, <<"${MQ_USERNAME}">>},
                        {password, <<"${MQ_PASSWORD}">>},
                        {{- if eq .Values.global.mq.tls.enabled true }}
                          {ssl, [
                            {tls, true}
                          ]},
                        {{- end }}
                        {vhost, <<"${MQ_VHOST}">>}
                    ]
          {{- else }}
                      [
                        {host, "rabbit-service"},
                        {port, 5672},
                        {username, <<"${MQ_USERNAME}">>},
                        {password, <<"${MQ_PASSWORD}">>},
                        {vhost, <<"${MQ_VHOST}">>}
                    ]
          {{- end }}
                ]},
          {connections_per_queue, 1},   %% The specified number of tcp connections will be created for each queue
          {channels_per_connection, 1},   %% Virtual connections for one connections_per_queue
          {messages_prefetch_size_per_channel, 20}    %% The number of queues within the channel
        ]},

        %% producer of timer requests
        {publish_timer_request, [
                {servers, [
          {{- if eq .Values.global.mq.internal false }}
                      [
                        {host, "${MQ_HOST}"},
                        {port, ${MQ_PORT}},
                        {username, <<"${MQ_USERNAME}">>},
                        {password, <<"${MQ_PASSWORD}">>},
                        {{- if eq .Values.global.mq.tls.enabled true }}
                          {ssl, [
                            {tls, true}
                          ]},
                        {{- end }}
                        {vhost, <<"${MQ_VHOST}">>}
                    ]
          {{- else }}
                      [
                        {host, "rabbit-service"},
                        {port, 5672},
                        {username, <<"${MQ_USERNAME}">>},
                        {password, <<"${MQ_PASSWORD}">>},
                        {vhost, <<"${MQ_VHOST}">>}
                    ]
          {{- end }}
                ]},
          {min_size, {{ .Values.global.worker.publish_timer_request_min_size | default 1 }}},
          {max_size, {{ .Values.global.worker.publish_timer_request_max_size | default 1 }}},
          {start_size, {{ .Values.global.worker.publish_timer_request_start_size | default 1 }}}
        ]},

        %% consumer for timer responses
        {consumer_timer_response, [
                {servers, [
          {{- if eq .Values.global.mq.internal false }}
                      [
                        {host, "${MQ_HOST}"},
                        {port, ${MQ_PORT}},
                        {username, <<"${MQ_USERNAME}">>},
                        {password, <<"${MQ_PASSWORD}">>},
                        {{- if eq .Values.global.mq.tls.enabled true }}
                          {ssl, [
                            {tls, true}
                          ]},
                        {{- end }}
                        {vhost, <<"${MQ_VHOST}">>}
                    ]
          {{- else }}
                      [
                        {host, "rabbit-service"},
                        {port, 5672},
                        {username, <<"${MQ_USERNAME}">>},
                        {password, <<"${MQ_PASSWORD}">>},
                        {vhost, <<"${MQ_VHOST}">>}
                    ]
          {{- end }}
                ]},
          {connections_per_queue, 1},   %% The specified number of tcp connections will be created for each queue
          {channels_per_connection, 1},   %% Virtual connections for one connections_per_queue
          {messages_prefetch_size_per_channel, 20}    %% The number of queues within the channel
        ]},

        %% producer of http reqeuests, API logic
        {publish_http_request, [
                {servers, [
                    {{- if hasKey .Values.global "mq_http" }}
                      [
                        {host, "${MQ_HTTP_HOST}"},
                        {port, ${MQ_HTTP_PORT}},
                        {username, <<"${MQ_HTTP_USERNAME}">>},
                        {password, <<"${MQ_HTTP_PASSWORD}">>},
                        {{- if eq .Values.global.mq.tls.enabled true }}
                          {ssl, [
                            {tls, true}
                          ]},
                        {{- end }}
                        {vhost, <<"${MQ_HTTP_VHOST}">>}
                      ]
                    {{- else }}
          {{- if eq .Values.global.mq.internal false }}
                      [
                        {host, "${MQ_HOST}"},
                        {port, ${MQ_PORT}},
                        {username, <<"${MQ_USERNAME}">>},
                        {password, <<"${MQ_PASSWORD}">>},
                        {{- if eq .Values.global.mq.tls.enabled true }}
                          {ssl, [
                            {tls, true}
                          ]},
                        {{- end }}
                        {vhost, <<"${MQ_VHOST}">>}
                    ]
          {{- else }}
                      [
                        {host, "rabbit-service"},
                        {port, 5672},
                        {username, <<"${MQ_USERNAME}">>},
                        {password, <<"${MQ_PASSWORD}">>},
                        {vhost, <<"${MQ_VHOST}">>}
                    ]
          {{- end }}
          {{- end }}
                ]},
          {queues_count, {{ .Values.global.worker.publish_http_request_queues_count | default 8 }}},
          {min_size, {{ .Values.global.worker.publish_http_request_min_size | default 30 }}},
          {max_size, {{ .Values.global.worker.publish_http_request_max_size | default 30 }}},
          {start_size, {{ .Values.global.worker.publish_http_request_start_size | default 30 }}}
        ]},

        %% consumer for http responses, API logic
        {consumer_http_response, [
                {servers, [
                    {{- if hasKey .Values.global "mq_http" }}
                      [
                        {host, "${MQ_HTTP_HOST}"},
                        {port, ${MQ_HTTP_PORT}},
                        {username, <<"${MQ_HTTP_USERNAME}">>},
                        {password, <<"${MQ_HTTP_PASSWORD}">>},
                        {{- if eq .Values.global.mq.tls.enabled true }}
                          {ssl, [
                            {tls, true}
                          ]},
                        {{- end }}
                        {vhost, <<"${MQ_HTTP_VHOST}">>}
                      ]
                    {{- else }}
          {{- if eq .Values.global.mq.internal false }}
                      [
                        {host, "${MQ_HOST}"},
                        {port, ${MQ_PORT}},
                        {username, <<"${MQ_USERNAME}">>},
                        {password, <<"${MQ_PASSWORD}">>},
                        {{- if eq .Values.global.mq.tls.enabled true }}
                          {ssl, [
                            {tls, true}
                          ]},
                        {{- end }}
                        {vhost, <<"${MQ_VHOST}">>}
                    ]
          {{- else }}
                      [
                        {host, "rabbit-service"},
                        {port, 5672},
                        {username, <<"${MQ_USERNAME}">>},
                        {password, <<"${MQ_PASSWORD}">>},
                        {vhost, <<"${MQ_VHOST}">>}
                    ]
          {{- end }}
          {{- end }}
                ]},
          {connections_per_queue, {{ .Values.global.worker.consumer_http_response_connections_per_queue | default 2 }}},   %% The specified number of tcp connections will be created for each queue
          {channels_per_connection, {{ .Values.global.worker.consumer_http_response_channels_per_connection | default 1 }}},   %% Virtual connections for one connections_per_queue
          {messages_prefetch_size_per_channel, {{ .Values.global.worker.consumer_http_response_messages_prefetch_size_per_channel | default 40 }}}    %% The number of queues within the channel
        ]},

        %% Logic call process
        %% producer of rpc requests, RPC logic
        {publish_rpc_request, [
                {servers, [
          {{- if eq .Values.global.mq.internal false }}
                      [
                        {host, "${MQ_HOST}"},
                        {port, ${MQ_PORT}},
                        {username, <<"${MQ_USERNAME}">>},
                        {password, <<"${MQ_PASSWORD}">>},
                        {{- if eq .Values.global.mq.tls.enabled true }}
                          {ssl, [
                            {tls, true}
                          ]},
                        {{- end }}
                        {vhost, <<"${MQ_VHOST}">>}
                    ]
          {{- else }}
                      [
                        {host, "rabbit-service"},
                        {port, 5672},
                        {username, <<"${MQ_USERNAME}">>},
                        {password, <<"${MQ_PASSWORD}">>},
                        {vhost, <<"${MQ_VHOST}">>}
                    ]
          {{- end }}
                ]},
          {queues_count, {{ .Values.global.worker.publish_rpc_request_queues_count | default 1 }}},
          {min_size, {{ .Values.global.worker.publish_rpc_request_min_size | default 5 }}},
          {max_size, {{ .Values.global.worker.publish_rpc_request_max_size | default 5 }}},
          {start_size, {{ .Values.global.worker.publish_rpc_request_start_size | default 5 }}},
          {is_sharded, true}   %% Legacy: will be removed
        ]},

        %% consumer for rpc responses, RPC logic
        {consumer_rpc_response, [
                {servers, [
          {{- if eq .Values.global.mq.internal false }}
                      [
                        {host, "${MQ_HOST}"},
                        {port, ${MQ_PORT}},
                        {username, <<"${MQ_USERNAME}">>},
                        {password, <<"${MQ_PASSWORD}">>},
                        {{- if eq .Values.global.mq.tls.enabled true }}
                          {ssl, [
                            {tls, true}
                          ]},
                        {{- end }}
                        {vhost, <<"${MQ_VHOST}">>}
                    ]
          {{- else }}
                      [
                        {host, "rabbit-service"},
                        {port, 5672},
                        {username, <<"${MQ_USERNAME}">>},
                        {password, <<"${MQ_PASSWORD}">>},
                        {vhost, <<"${MQ_VHOST}">>}
                    ]
          {{- end }}
                ]},
          {connections_per_queue, {{ .Values.global.worker.consumer_rpc_response_connections_per_queue | default 2 }}},   %% The specified number of tcp connections will be created for each queue
          {channels_per_connection, {{ .Values.global.worker.consumer_rpc_response_channels_per_connection | default 1 }}},   %% Virtual connections for one connections_per_queue
          {messages_prefetch_size_per_channel, {{ .Values.global.worker.consumer_rpc_response_messages_prefetch_size_per_channel | default 20 }}}    %% The number of queues within the channel
        ]},

        %% logic usercode
        %% producer of usercode requests, CODE logic
        {publish_cce_request, [
                {servers, [
          {{- if eq .Values.global.mq.internal false }}
                      [
                        {host, "${MQ_HOST}"},
                        {port, ${MQ_PORT}},
                        {username, <<"${MQ_USERNAME}">>},
                        {password, <<"${MQ_PASSWORD}">>},
                        {{- if eq .Values.global.mq.tls.enabled true }}
                          {ssl, [
                            {tls, true}
                          ]},
                        {{- end }}
                        {vhost, <<"${MQ_VHOST}">>}
                    ]
          {{- else }}
                      [
                        {host, "rabbit-service"},
                        {port, 5672},
                        {username, <<"${MQ_USERNAME}">>},
                        {password, <<"${MQ_PASSWORD}">>},
                        {vhost, <<"${MQ_VHOST}">>}
                    ]
          {{- end }}
                ]},
          {queues_count, {{ .Values.global.worker.publish_cce_request_queues_count | default 5 }}},
          {min_size, {{ .Values.global.worker.publish_cce_request_min_size | default 5 }}},
          {max_size, {{ .Values.global.worker.publish_cce_request_max_size | default 5 }}},
          {start_size, {{ .Values.global.worker.publish_cce_request_start_size | default 5 }}}
        ]},

        %% consumer for usercode responses, CODE logic
        {consumer_cce_response, [
                {servers, [
          {{- if eq .Values.global.mq.internal false }}
                      [
                        {host, "${MQ_HOST}"},
                        {port, ${MQ_PORT}},
                        {username, <<"${MQ_USERNAME}">>},
                        {password, <<"${MQ_PASSWORD}">>},
                        {{- if eq .Values.global.mq.tls.enabled true }}
                          {ssl, [
                            {tls, true}
                          ]},
                        {{- end }}
                        {vhost, <<"${MQ_VHOST}">>}
                    ]
          {{- else }}
                      [
                        {host, "rabbit-service"},
                        {port, 5672},
                        {username, <<"${MQ_USERNAME}">>},
                        {password, <<"${MQ_PASSWORD}">>},
                        {vhost, <<"${MQ_VHOST}">>}
                    ]
          {{- end }}
                ]},
          {connections_per_queue, {{ .Values.global.worker.consumer_cce_response_connections_per_queue | default 2 }}},   %% The specified number of tcp connections will be created for each queue
          {channels_per_connection, {{ .Values.global.worker.consumer_cce_response_channels_per_connection | default 1 }}},   %% Virtual connections for one connections_per_queue
          {messages_prefetch_size_per_channel, {{ .Values.global.worker.consumer_cce_response_messages_prefetch_size_per_channel | default 20 }}}    %% The number of queues within the channel
        ]},

        %% logic git call
        %% producer
        {publish_git_call_request, [
          {servers, [
          {{- if eq .Values.global.mq.internal false }}
                      [
                        {host, "${MQ_HOST}"},
                        {port, ${MQ_PORT}},
                        {username, <<"${MQ_USERNAME}">>},
                        {password, <<"${MQ_PASSWORD}">>},
                        {{- if eq .Values.global.mq.tls.enabled true }}
                          {ssl, [
                            {tls, true}
                          ]},
                        {{- end }}
                        {vhost, <<"${MQ_VHOST}">>}
                    ]
          {{- else }}
                      [
                        {host, "rabbit-service"},
                        {port, 5672},
                        {username, <<"${MQ_USERNAME}">>},
                        {password, <<"${MQ_PASSWORD}">>},
                        {vhost, <<"${MQ_VHOST}">>}
                    ]
          {{- end }}
                ]},
          {build_dep_queues_count, {{ .Values.global.worker.publish_git_call_request_build_dep_queues_count | default 1 }}},
          {remove_dep_queues_count, {{ .Values.global.worker.publish_git_call_request_remove_dep_queues_count | default 1 }}},
          {get_script_queues_count, {{ .Values.global.worker.publish_git_call_request_get_script_queues_count | default 1 }}},
          {remove_script_queues_count, {{ .Values.global.worker.publish_git_call_request_remove_script_queues_count | default 1 }}},
          {validate_script_queues_count, {{ .Values.global.worker.publish_git_call_request_validate_script_queues_count | default 1 }}},
          {compile_script_queues_count, {{ .Values.global.worker.publish_git_call_request_compile_script_queues_count | default 1 }}},
          {run_script_queues_count, {{ .Values.global.worker.publish_git_call_request_run_script_queues_count | default 10 }}},
          {min_size, {{ .Values.global.worker.publish_git_call_request_min_size | default 2 }}},
          {max_size, {{ .Values.global.worker.publish_git_call_request_max_size | default 2 }}},
          {start_size, {{ .Values.global.worker.publish_git_call_request_start_size | default 2 }}}
        ]},


        %% consumer
        {consumer_git_call_response, [
          {servers, [
          {{- if eq .Values.global.mq.internal false }}
                      [
                        {host, "${MQ_HOST}"},
                        {port, ${MQ_PORT}},
                        {username, <<"${MQ_USERNAME}">>},
                        {password, <<"${MQ_PASSWORD}">>},
                        {{- if eq .Values.global.mq.tls.enabled true }}
                          {ssl, [
                            {tls, true}
                          ]},
                        {{- end }}
                        {vhost, <<"${MQ_VHOST}">>}
                    ]
          {{- else }}
                      [
                        {host, "rabbit-service"},
                        {port, 5672},
                        {username, <<"${MQ_USERNAME}">>},
                        {password, <<"${MQ_PASSWORD}">>},
                        {vhost, <<"${MQ_VHOST}">>}
                    ]
          {{- end }}
                ]},
          {queues_count, {{ .Values.global.worker.consumer_git_call_response_queues_count | default 1 }}},
          {connections_per_queue, {{ .Values.global.worker.consumer_git_call_response_connections_per_queue | default 1 }}},
          {channels_per_connection, {{ .Values.global.worker.consumer_git_call_response_channels_per_connection | default 1 }}},
          {messages_prefetch_size_per_channel, {{ .Values.global.worker.consumer_git_call_response_messages_prefetch_size_per_channel | default 50 }}}
        ]},


    {{- if .Values.global.gitcall.enabled }}
        {git_call_v2, [
            %% Optional. Boolean. Default: false.
            %% Enable\Disable GitCallV2 feature.
            %% Config sections
            %%   publish_git_call_v2_request
            %%   consumer_git_call_v2_response
            %%   consumer_git_call_v2_status
            %%   publish_dunder_git_call_v2_request
            %%   consumer_dunder_git_call_v2_request
            %% must be configured if enabled, otherwise it is safe to completely remove them.
            %% If disabled, worker packet returns {error, git_calL_disabled} on all related commands.
            {enabled, true},

            %% Optional. Number. Milliseconds. Default: ?RUN_TASK_TIME_TO_WAIT_CONSUMER 100.
            %% The maximum time the code is allowed to work.
            {run_task_time_to_wait_consumer, 10000},

            %% Optional. Boolean. Default: ?USE_ENIGMA true.
            %% Controls whether the commutation with Gitcall has to be encrypted by Enigma or not.
            {use_enigma, false},

            %% Optional. Boolean. Default: false.
            %% Set to true to get debug output from Gitcall module(s).
            {debug, true}
            ]},


            %% Required if git_call_v2.enabled true, otherwise could be omitted.
            %% logic git call v2
            %% producer
            {publish_git_call_v2_request, [
                {servers, [[
          {{- if eq .Values.global.mq.internal false }}
                        {host, "${MQ_HOST}"},
                        {port, ${MQ_PORT}},
                        {username, <<"${MQ_USERNAME}">>},
                        {password, <<"${MQ_PASSWORD}">>},
                        {{- if eq .Values.global.mq.tls.enabled true }}
                          {ssl, [
                            {tls, true}
                          ]},
                        {{- end }}
                        {vhost, <<"${MQ_GITCALL_VHOST}">>}
          {{- else }}
                        {host, "rabbit-service"},
                        {port, 5672},
                        {username, <<"${MQ_USERNAME}">>},
                        {password, <<"${MQ_PASSWORD}">>},
                        {vhost, <<"${MQ_GITCALL_VHOST}">>}

          {{- end }}
                ]]},

                %% Optional. BinaryString. Default: ?GITCALL_EXCHANGE <<"gitcall-v2">>.
                %% The exchange is used to communicate with Gitcall service.
                %% All calls to Gitcall go through the exchange.
                %%{exchange, <<"gitcall-v2">>},

                %% Optional. BinaryString. Default: ?BUILD_SERVICE_QUEUE <<"gitcall-v2-buildservice-">>.
                %% The queue is used to build code an pack it ready-to-run units, most possibly docker images
                %% The count option controls how many prefixed queues to publish to.
                %%
                %%{buildservice_queue, <<"gitcall-v2-buildservice-">>},
                %%{buildservice_queues_count, 1},

                %% Optional. BinaryString. Default: ?BUILD_ARCHIVE_QUEUE <<"gitcall-v2-buildarchive-">>.
                %% The queue is used to retrieve build achieve.
                %% The archive contains build status which could be "done", "error", "internal_error", "not_found", "in_progress"
                %% The count option controls how many prefixed queues to publish to.
                %%
                %%{buildarchive_queue, <<"gitcall-v2-buildarchive-">>},
                %%{buildarchive_queues_count, 1},

                %% Optional. BinaryString. Default: ?DEPLOY_SERVICE_QUEUE <<"gitcall-v2-deployservice-">>.
                %% The queue is used to deploy services to production runtime, most possibly k8s
                %% The count option controls how many prefixed queues to publish to.
                %%
                %%{deployservice_queue, <<"gitcall-v2-deployservice-">>},
                %%{deployservice_queues_count, 1},

                %% Optional. BinaryString. Default: ?GET_SERVICE_QUEUE <<"gitcall-v2-getservice-">>.
                %% The queue is used to get service details: source, built and deployed versions.
                %% The count option controls how many prefixed queues to publish to.
                %%
                %%{getservice_queue, <<"gitcall-v2-getservice-">>},
                %%{getservice_queues_count, 1},

                %% Optional. BinaryString. Default: ?REMOVE_SERVICE_QUEUE <<"gitcall-v2-removeservice-">>.
                %% The queue is used to remove service from production runtime and Gitcall database.
                %% The count option controls how many prefixed queues to publish to.
                %%
                %%{removeservice_queue, <<"gitcall-v2-getservice-">>},
                %%{removeservice_queues_count, 1},

                %% Optional. BinaryString. Default: ?RUN_SERVICE_QUEUE <<"gitcall-v2-runservice-">>.
                %% The queue is used to ask Gitcall to start (if not) service in production runtime. Often used together with stopservice
                %% The count option controls how many prefixed queues to publish to.
                %%
                %%{runservice_queue, <<"gitcall-v2-runservice-">>},
                %%{runservice_queues_count, 1},

                %% Optional. BinaryString. Default: ?SAVE_SERVICE_QUEUE <<"gitcall-v2-saveservice-">>.
                %% The queue is used to save temporary changes. Used by Corezoid sandbox
                %% The count option controls how many prefixed queues to publish to.
                %%
                %%{saveservice_queue, <<"gitcall-v2-saveservice-">>},
                %%{saveservice_queues_count, 1},

                %% Optional. BinaryString. Default: ?STOP_SERVICE_QUEUE <<"gitcall-v2-stopservice-">>.
                %% The queue is used to stop service in production runtime when idle. Could be run later with runservice call
                %% The count option controls how many prefixed queues to publish to.
                %%
                %%{stopservice_queue, <<"gitcall-v2-stopservice-">>},
                %%{stopservice_queues_count, 1},

                %% Optional. BinaryString. Default: ?VALIDATE_SERVICE_QUEUE <<"gitcall-v2-validateservice-">>.
                %% The queue is used to validate the source code.
                %% If API returns done the source is already built and ready for deploy.
                %% The count option controls how many prefixed queues to publish to.
                %%
                %%{validateservice_queue, <<"gitcall-v2-validateservice-">>},
                %%{validateservice_queues_count, 1},

                {min_size, {{ .Values.global.worker.publish_git_call_v2_request_min_size | default 2 }}},
                {max_size, {{ .Values.global.worker.publish_git_call_v2_request_max_size | default 2 }}},
                {start_size, {{ .Values.global.worker.publish_git_call_v2_request_start_size | default 2 }}}
            ]},

            %% Required if git_call_v2.enabled true, otherwise could be omitted.
            %% consumer processes replies on worker requests
            {consumer_git_call_v2_response, [
                {servers, [[
            {{- if eq .Values.global.mq.internal false }}
                        {host, "${MQ_HOST}"},
                        {port, ${MQ_PORT}},
                        {username, <<"${MQ_USERNAME}">>},
                        {password, <<"${MQ_PASSWORD}">>},
                        {{- if eq .Values.global.mq.tls.enabled true }}
                          {ssl, [
                            {tls, true}
                          ]},
                        {{- end }}
                        {vhost, <<"${MQ_GITCALL_VHOST}">>}
            {{- else }}
                        {host, "rabbit-service"},
                        {port, 5672},
                        {username, <<"${MQ_USERNAME}">>},
                        {password, <<"${MQ_PASSWORD}">>},
                        {vhost, <<"${MQ_GITCALL_VHOST}">>}
            {{- end }}
                ]]},
                {connections_per_queue, {{ .Values.global.worker.consumer_git_call_v2_response_connections_per_queue | default 1 }}},
                {channels_per_connection, {{ .Values.global.worker.consumer_git_call_v2_response_channels_per_connection | default 1 }}},
                {messages_prefetch_size_per_channel, {{ .Values.global.worker.consumer_git_call_v2_response_messages_prefetch_size_per_channel | default 50 }}}
            ]},

            %% Required if git_call_v2.enabled true, otherwise could be omitted.
            %% consumer processes status updates from gitcall
            {consumer_git_call_v2_status, [
                {servers, [[
            {{- if eq .Values.global.mq.internal false }}
                        {host, "${MQ_HOST}"},
                        {port, ${MQ_PORT}},
                        {username, <<"${MQ_USERNAME}">>},
                        {password, <<"${MQ_PASSWORD}">>},
                        {{- if eq .Values.global.mq.tls.enabled true }}
                          {ssl, [
                            {tls, true}
                          ]},
                        {{- end }}
                        {vhost, <<"${MQ_GITCALL_VHOST}">>}
            {{- else }}
                        {host, "rabbit-service"},
                        {port, 5672},
                        {username, <<"${MQ_USERNAME}">>},
                        {password, <<"${MQ_PASSWORD}">>},
                        {vhost, <<"${MQ_GITCALL_VHOST}">>}
            {{- end }}
                ]]},
                {connections_per_queue, {{ .Values.global.worker.consumer_git_call_v2_status_connections_per_queue | default 1 }}},
                {channels_per_connection, {{ .Values.global.worker.consumer_git_call_v2_status_channels_per_connection | default 1 }}},
                {messages_prefetch_size_per_channel, {{ .Values.global.worker.consumer_git_call_v2_status_messages_prefetch_size_per_channel | default 50 }}}
            ]},

            %% Required if git_call_v2.enabled true, otherwise could be omitted.
            %% logic dunder git call v2
            %% producer
            {publish_dunder_git_call_v2_request, [
                {servers, [[
            {{- if eq .Values.global.mq.internal false }}
                        {host, "${MQ_HOST}"},
                        {port, ${MQ_PORT}},
                        {username, <<"${MQ_USERNAME}">>},
                        {password, <<"${MQ_PASSWORD}">>},
                        {{- if eq .Values.global.mq.tls.enabled true }}
                          {ssl, [
                            {tls, true}
                          ]},
                        {{- end }}
                        {vhost, <<"${MQ_DUNDER_GITCALL_VHOST}">>}
            {{- else }}
                        {host, "rabbit-service"},
                        {port, 5672},
                        {username, <<"${MQ_USERNAME}">>},
                        {password, <<"${MQ_PASSWORD}">>},
                        {vhost, <<"${MQ_DUNDER_GITCALL_VHOST}">>}
            {{- end }}
                ]]},
                {min_size, {{ .Values.global.worker.publish_dunder_git_call_v2_request_min_size | default 5 }}},
                {max_size, {{ .Values.global.worker.publish_dunder_git_call_v2_request_max_size | default 5 }}},
                {start_size, {{ .Values.global.worker.publish_dunder_git_call_v2_request_start_size | default 5 }}}
            ]},

            %% Required if git_call_v2.enabled true, otherwise could be omitted.
            %% consumer
            {consumer_dunder_git_call_v2_response, [
                {servers, [[
            {{- if eq .Values.global.mq.internal false }}
                        {host, "${MQ_HOST}"},
                        {port, ${MQ_PORT}},
                        {username, <<"${MQ_USERNAME}">>},
                        {password, <<"${MQ_PASSWORD}">>},
                        {{- if eq .Values.global.mq.tls.enabled true }}
                          {ssl, [
                            {tls, true}
                          ]},
                        {{- end }}
                        {vhost, <<"${MQ_DUNDER_GITCALL_VHOST}">>}
            {{- else }}
                        {host, "rabbit-service"},
                        {port, 5672},
                        {username, <<"${MQ_USERNAME}">>},
                        {password, <<"${MQ_PASSWORD}">>},
                        {vhost, <<"${MQ_DUNDER_GITCALL_VHOST}">>}
            {{- end }}
                ]]},
            {connections_per_queue, {{ .Values.global.worker.consumer_dunder_git_call_v2_response_connections_per_queue | default 1 }}},
            {channels_per_connection, {{ .Values.global.worker.consumer_dunder_git_call_v2_response_channels_per_connection | default 1 }}},
            {messages_prefetch_size_per_channel, {{ .Values.global.worker.consumer_dunder_git_call_v2_response_messages_prefetch_size_per_channel | default 50 }}}
        ]},
      {{- end }}

        %% logic db call
        %% producer
        {publish_db_call_request, [
                {servers, [
          {{- if eq .Values.global.mq.internal false }}
                      [
                        {host, "${MQ_HOST}"},
                        {port, ${MQ_PORT}},
                        {username, <<"${MQ_USERNAME}">>},
                        {password, <<"${MQ_PASSWORD}">>},
                        {{- if eq .Values.global.mq.tls.enabled true }}
                          {ssl, [
                            {tls, true}
                          ]},
                        {{- end }}
                        {vhost, <<"${MQ_VHOST}">>}
                    ]
          {{- else }}
                      [
                        {host, "rabbit-service"},
                        {port, 5672},
                        {username, <<"${MQ_USERNAME}">>},
                        {password, <<"${MQ_PASSWORD}">>},
                        {vhost, <<"${MQ_VHOST}">>}
                    ]
          {{- end }}
                ]},
          {min_size, {{ .Values.global.worker.publish_db_call_request_min_size | default 3 }}},
          {max_size, {{ .Values.global.worker.publish_db_call_request_max_size | default 3 }}},
          {start_size, {{ .Values.global.worker.publish_db_call_request_start_size | default 3 }}}
        ]},


        %% consumer
        {consumer_db_call_response, [
                {servers, [
          {{- if eq .Values.global.mq.internal false }}
                      [
                        {host, "${MQ_HOST}"},
                        {port, ${MQ_PORT}},
                        {username, <<"${MQ_USERNAME}">>},
                        {password, <<"${MQ_PASSWORD}">>},
                        {{- if eq .Values.global.mq.tls.enabled true }}
                          {ssl, [
                            {tls, true}
                          ]},
                        {{- end }}
                        {vhost, <<"${MQ_VHOST}">>}
                    ]
          {{- else }}
                      [
                        {host, "rabbit-service"},
                        {port, 5672},
                        {username, <<"${MQ_USERNAME}">>},
                        {password, <<"${MQ_PASSWORD}">>},
                        {vhost, <<"${MQ_VHOST}">>}
                    ]
          {{- end }}
                ]},
          {queues_count, {{ .Values.global.worker.consumer_db_call_response_queues_count | default 10 }}},
          {connections_per_queue, {{ .Values.global.worker.consumer_db_call_response_connections_per_queue| default 1 }}},
          {channels_per_connection, {{ .Values.global.worker.consumer_db_call_response_channels_per_connection | default 1 }}},
          {messages_prefetch_size_per_channel, {{ .Values.global.worker.consumer_db_call_response_messages_prefetch_size_per_channel | default 50 }}}
        ]},

        %% logic deep_memo es call
        %% producer
        {publish_es_call_request, [
          {servers, [
          {{- if eq .Values.global.mq.internal false }}
                      [
                        {host, "${MQ_HOST}"},
                        {port, ${MQ_PORT}},
                        {username, <<"${MQ_USERNAME}">>},
                        {password, <<"${MQ_PASSWORD}">>},
                        {{- if eq .Values.global.mq.tls.enabled true }}
                          {ssl, [
                            {tls, true}
                          ]},
                        {{- end }}
                        {vhost, <<"${MQ_VHOST}">>}
                    ]
          {{- else }}
                      [
                        {host, "rabbit-service"},
                        {port, 5672},
                        {username, <<"${MQ_USERNAME}">>},
                        {password, <<"${MQ_PASSWORD}">>},
                        {vhost, <<"${MQ_VHOST}">>}
                    ]
          {{- end }}
                ]},
          {min_size, {{ .Values.global.worker.publish_es_call_request_min_size | default 3 }}},
          {max_size, {{ .Values.global.worker.publish_es_call_request_max_size | default 3 }}},
          {start_size, {{ .Values.global.worker.publish_es_call_request_start_size | default 3 }}}
        ]},

        %% consumer
        {consumer_es_call_response, [
          {servers, [
          {{- if eq .Values.global.mq.internal false }}
                      [
                        {host, "${MQ_HOST}"},
                        {port, ${MQ_PORT}},
                        {username, <<"${MQ_USERNAME}">>},
                        {password, <<"${MQ_PASSWORD}">>},
                        {{- if eq .Values.global.mq.tls.enabled true }}
                          {ssl, [
                            {tls, true}
                          ]},
                        {{- end }}
                        {vhost, <<"${MQ_VHOST}">>}
                    ]
          {{- else }}
                      [
                        {host, "rabbit-service"},
                        {port, 5672},
                        {username, <<"${MQ_USERNAME}">>},
                        {password, <<"${MQ_PASSWORD}">>},
                        {vhost, <<"${MQ_VHOST}">>}
                    ]
          {{- end }}
                ]},
          %{queues_count, {{ .Values.global.worker.consumer_es_call_response_queues_count | default 10 }}},
          {connections_per_queue, {{ .Values.global.worker.consumer_es_call_response_connections_per_queue | default 1 }}},
          {channels_per_connection, {{ .Values.global.worker.consumer_es_call_response_channels_per_connection | default 2 }}},
          {messages_prefetch_size_per_channel, {{ .Values.global.worker.consumer_es_call_response_messages_prefetch_size_per_channel | default 50 }}}
        ]},

        %% logic get task
        %% producer of get_task requests, QUEUE logic
        {publish_get_task_request, [
                {servers, [
          {{- if eq .Values.global.mq.internal false }}
                      [
                        {host, "${MQ_HOST}"},
                        {port, ${MQ_PORT}},
                        {username, <<"${MQ_USERNAME}">>},
                        {password, <<"${MQ_PASSWORD}">>},
                        {{- if eq .Values.global.mq.tls.enabled true }}
                          {ssl, [
                            {tls, true}
                          ]},
                        {{- end }}
                        {vhost, <<"${MQ_VHOST}">>}
                    ]
          {{- else }}
                      [
                        {host, "rabbit-service"},
                        {port, 5672},
                        {username, <<"${MQ_USERNAME}">>},
                        {password, <<"${MQ_PASSWORD}">>},
                        {vhost, <<"${MQ_VHOST}">>}
                    ]
          {{- end }}
                ]},
          {queues_count, {{ .Values.global.worker.publish_get_task_request_queues_count | default 5 }}},
          {min_size, {{ .Values.global.worker.publish_get_task_request_min_size | default 3 }}},
          {max_size, {{ .Values.global.worker.publish_get_task_request_max_size | default 3 }}},
          {start_size, {{ .Values.global.worker.publish_get_task_request_start_size | default 3 }}}
        ]},

        %% consumer for get_task requests, QUEUE logic
        {consumer_get_task_response, [
                {servers, [
          {{- if eq .Values.global.mq.internal false }}
                      [
                        {host, "${MQ_HOST}"},
                        {port, ${MQ_PORT}},
                        {username, <<"${MQ_USERNAME}">>},
                        {password, <<"${MQ_PASSWORD}">>},
                        {{- if eq .Values.global.mq.tls.enabled true }}
                          {ssl, [
                            {tls, true}
                          ]},
                        {{- end }}
                        {vhost, <<"${MQ_VHOST}">>}
                    ]
          {{- else }}
                      [
                        {host, "rabbit-service"},
                        {port, 5672},
                        {username, <<"${MQ_USERNAME}">>},
                        {password, <<"${MQ_PASSWORD}">>},
                        {vhost, <<"${MQ_VHOST}">>}
                    ]
          {{- end }}
                ]},
          {connections_per_queue, {{ .Values.global.worker.consumer_get_task_response_connections_per_queue | default 2 }}},   %% The specified number of tcp connections will be created for each queue
          {channels_per_connection, {{ .Values.global.worker.channels_per_connection_connections_per_queue | default 1 }}},   %% Virtual connections for one connections_per_queue
          {messages_prefetch_size_per_channel, {{ .Values.global.worker.messages_prefetch_size_per_channel_connections_per_queue | default 20 }}}    %% The number of queues within the channel
        ]},

        %% logic modify task
        %% producer of modify requests, QUEUE logic
        {publish_modify_request, [
                {servers, [
          {{- if eq .Values.global.mq.internal false }}
                      [
                        {host, "${MQ_HOST}"},
                        {port, ${MQ_PORT}},
                        {username, <<"${MQ_USERNAME}">>},
                        {password, <<"${MQ_PASSWORD}">>},
                        {{- if eq .Values.global.mq.tls.enabled true }}
                          {ssl, [
                            {tls, true}
                          ]},
                        {{- end }}
                        {vhost, <<"${MQ_VHOST}">>}
                    ]
          {{- else }}
                      [
                        {host, "rabbit-service"},
                        {port, 5672},
                        {username, <<"${MQ_USERNAME}">>},
                        {password, <<"${MQ_PASSWORD}">>},
                        {vhost, <<"${MQ_VHOST}">>}
                    ]
          {{- end }}
                ]},
          {min_size, {{ .Values.global.worker.publish_modify_request_min_size | default 5 }}},
          {max_size, {{ .Values.global.worker.publish_modify_request_max_size | default 5 }}},
          {start_size, {{ .Values.global.worker.publish_modify_request_start_size | default 5 }}}
        ]},

        %% settings queue
        %% This queue need to communicate between corezoid
        %% components. Api, http_worker, worker, cce, ... communicate
        %% through settings queue
        {publish_settings, [
                {servers, [
                    {{- if hasKey .Values.global "mq_http" }}
                      [
                        {host, "${MQ_HTTP_HOST}"},
                        {port, ${MQ_HTTP_PORT}},
                        {username, <<"${MQ_HTTP_USERNAME}">>},
                        {password, <<"${MQ_HTTP_PASSWORD}">>},
                        {{- if eq .Values.global.mq.tls.enabled true }}
                          {ssl, [
                            {tls, true}
                          ]},
                        {{- end }}
                        {vhost, <<"${MQ_HTTP_VHOST}">>}
                      ]
                    {{- else }}
          {{- if eq .Values.global.mq.internal false }}
                      [
                        {host, "${MQ_HOST}"},
                        {port, ${MQ_PORT}},
                        {username, <<"${MQ_USERNAME}">>},
                        {password, <<"${MQ_PASSWORD}">>},
                        {{- if eq .Values.global.mq.tls.enabled true }}
                          {ssl, [
                            {tls, true}
                          ]},
                        {{- end }}
                        {vhost, <<"${MQ_VHOST}">>}
                    ]
          {{- else }}
                      [
                        {host, "rabbit-service"},
                        {port, 5672},
                        {username, <<"${MQ_USERNAME}">>},
                        {password, <<"${MQ_PASSWORD}">>},
                        {vhost, <<"${MQ_VHOST}">>}
                    ]
          {{- end }}
          {{- end }}
                ]},
          {min_size, {{ .Values.global.worker.publish_settings_min_size | default 2 }}},
          {max_size, {{ .Values.global.worker.publish_settings_max_size | default 2 }}},
          {start_size, {{ .Values.global.worker.publish_settings_start_size | default 2 }}}
        ]},

        %% consumer for settings
        %% this messages inform app-s about changes in a structure of processes,
        %% users, rights etc...
        {consumer_settings, [
                {servers, [
                    {{- if hasKey .Values.global "mq_http" }}
                      [
                        {host, "${MQ_HTTP_HOST}"},
                        {port, ${MQ_HTTP_PORT}},
                        {username, <<"${MQ_HTTP_USERNAME}">>},
                        {password, <<"${MQ_HTTP_PASSWORD}">>},
                        {{- if eq .Values.global.mq.tls.enabled true }}
                          {ssl, [
                            {tls, true}
                          ]},
                        {{- end }}
                        {vhost, <<"${MQ_HTTP_VHOST}">>}
                      ]
                    {{- else }}
          {{- if eq .Values.global.mq.internal false }}
                      [
                        {host, "${MQ_HOST}"},
                        {port, ${MQ_PORT}},
                        {username, <<"${MQ_USERNAME}">>},
                        {password, <<"${MQ_PASSWORD}">>},
                        {{- if eq .Values.global.mq.tls.enabled true }}
                          {ssl, [
                            {tls, true}
                          ]},
                        {{- end }}
                        {vhost, <<"${MQ_VHOST}">>}
                    ]
          {{- else }}
                      [
                        {host, "rabbit-service"},
                        {port, 5672},
                        {username, <<"${MQ_USERNAME}">>},
                        {password, <<"${MQ_PASSWORD}">>},
                        {vhost, <<"${MQ_VHOST}">>}
                    ]
          {{- end }}
          {{- end }}
                ]},
          {connections_per_queue, {{ .Values.global.worker.consumer_settings_connections_per_queue | default 1 }}},   %% The specified number of tcp connections will be created for each queue
          {channels_per_connection, {{ .Values.global.worker.consumer_settings_channels_per_connection | default 1 }}},   %% Virtual connections for one connections_per_queue
          {messages_prefetch_size_per_channel, {{ .Values.global.worker.consumer_settings_messages_prefetch_size_per_channel | default 20 }}}    %% The number of queues within the channel
        ]},

        %% interconnect cluster workers
        %% each node have to be able to connect with another nodes using interconnect.interface and interconnect.listen.port options
        {interconnect, [
          {name, workers},
          {id, <<"worker-{{ .Values.global.subdomain }}.{{ .Values.global.domain }}">>},    %% should be the same as "worker_id"
          {interface, "eth0"}, %% IP from this interface will be used for sending the first packet in the beginning of communication
          {password, <<"Igu1poh2eimeChahca">>}, %% should be the same on each node in this cluster that uses the same interconnect.name
          {listen, [
            {port, 5555},   %% port for internode communication in cluster
            {transport, tcp}, %% allowed values "tcp | ssl (need cert file)"
            %{opts, [{certfile, "/ebsmnt/conf/cp-self-signed.pem"}]}, %% uncomment this option to enable TLS encryption
            {max_connections, 1024} %% max connections from all nodes to this one -> sender.max_size * nodes count in this cluster
          ]},
          %% threads count between workers in the cluster
          {sender, [
            {start_size, 1},
            {min_size, 1},
            {max_size, 100}
          ]}
        ]},

        %% produce messages for all "to_worker" queues
        %% from requests that are coming through API
        %% user's requests on API, requests from user's interface
        {publish_to_worker_request, [
          {servers, [
          {{- if eq .Values.global.mq.internal false }}
            { [{{- $lastIndex := sub (len .Values.global.db.shards) 1}}
          {{- range $i, $e := .Values.global.db.shards }}
          {{- $i }}{{- if ne $i $lastIndex -}}, {{ end }} {{- end }}] , [[
              {host, "${MQ_HOST}"}
            ]]}
          ]},
          {port, ${MQ_PORT}},
          {username, <<"${MQ_USERNAME}">>},
          {password, <<"${MQ_PASSWORD}">>},
          {{- if eq .Values.global.mq.tls.enabled true }}
            {ssl, [
              {tls, true}
            ]},
          {{- end }}
          {{- else }}
                { [{{- $lastIndex := sub (len .Values.global.db.shards) 1}}
          {{- range $i, $e := .Values.global.db.shards }}
          {{- $i }}{{- if ne $i $lastIndex -}}, {{ end }} {{- end }}] , [[
              {host, "rabbit-service"}
            ]]}
          ]},
          {port, 5672},
          {username, <<"${MQ_USERNAME}">>},
          {password, <<"${MQ_PASSWORD}">>},
          {{- end }}
          {vhost, <<"${MQ_VHOST}">>},
          {min_size, {{ .Values.global.worker.publish_to_worker_request_min_size | default 5 }}},
          {max_size, {{ .Values.global.worker.publish_to_worker_request_max_size | default 5 }}},
          {start_size, {{ .Values.global.worker.publish_to_worker_request_start_size | default 5 }}}
        ]},

        %% consumer for to_worker
        {consumer_shard_response, [
                {servers, [
          {{- if eq .Values.global.mq.internal false }}
                      [
                        {host, "${MQ_HOST}"},
                        {port, ${MQ_PORT}},
                        {username, <<"${MQ_USERNAME}">>},
                        {password, <<"${MQ_PASSWORD}">>},
                        {{- if eq .Values.global.mq.tls.enabled true }}
                          {ssl, [
                            {tls, true}
                          ]},
                        {{- end }}
                        {vhost, <<"${MQ_VHOST}">>}
                    ]
          {{- else }}
                      [
                        {host, "rabbit-service"},
                        {port, 5672},
                        {username, <<"${MQ_USERNAME}">>},
                        {password, <<"${MQ_PASSWORD}">>},
                        {vhost, <<"${MQ_VHOST}">>}
                    ]
          {{- end }}
                ]},
          {connections_per_queue, {{ .Values.global.worker.consumer_shard_response_connections_per_queue | default 2 }}},   %% The specified number of tcp connections will be created for each queue
          {channels_per_connection, {{ .Values.global.worker.consumer_shard_response_channels_per_connection | default 1 }}},   %% Virtual connections for one connections_per_queue
          {messages_prefetch_size_per_channel, {{ .Values.global.worker.consumer_shard_response_messages_prefetch_size_per_channel | default 50 }}}    %% The number of queues within the channel
        ]}
      ]},
      %% Billing
        %% If you don't use billing or don't want to store any information
        %% about how to consume corezoid by users set up empty
        %% examples: {billing , []}
        %% Or create conv and put id to new_billing_conv_id section
        {billing, []},
        {lager, [
          {log_root, "/ebsmnt/erlang/worker/log"},
          {handlers, [ {lager_console_backend, [{level, {{ .Values.global.log_level | default "info" }} }] } ]},

          %% What colors to use with what log levels
          {colored, true},
          {colors, [
            {debug,     "\e[0;38m" },
            {info,      "\e[1;37m" },
            {notice,    "\e[1;36m" },
            {warning,   "\e[1;33m" },
            {error,     "\e[1;31m" },
            {critical,  "\e[1;35m" },
            {alert,     "\e[1;44m" },
            {emergency, "\e[1;41m" }

          ]},

          %% Whether to write a crash log, and where. Undefined means no crash logger.
          {crash_log, "crash.log"},
          %% Maximum size in bytes of events in the crash log - defaults to 65536
          {crash_log_msg_size, 65536},
          %% Maximum size of the crash log in bytes, before its rotated, set
          %% to 0 to disable rotation - default is 0
          {crash_log_size, 734003200},
          %% What time to rotate the crash log - default is no time
          %% rotation. See the README for a description of this format.
          {crash_log_date, "$D0"},
          %% Number of rotated crash logs to keep, 0 means keep only the
          %% current one - default is 0
          {crash_log_count, 1},
          %% Whether to redirect error_logger messages into lager - defaults to true
          {error_logger_redirect, true},
          %% How many messages per second to allow from error_logger before we start dropping them
          {error_logger_hwm, 50},
          %% How big the gen_event mailbox can get before it is switched into sync mode
          {async_threshold, 20},
          %% Switch back to async mode, when gen_event mailbox size decrease from 'async_threshold'
          %% to async_threshold - async_threshold_window
          {async_threshold_window, 5}
        ]
      }
    ].


kind: ConfigMap
metadata:
  name: {{ .Values.appName }}-config
