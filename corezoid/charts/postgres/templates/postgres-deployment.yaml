{{- if eq .Values.global.db.internal true }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.appName }}
  labels:
    app: {{ .Values.global.product }}
    tier: {{ .Values.appName }}
spec:
  selector:
    matchLabels:
      tier: {{ .Values.appName }}
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: {{ .Values.global.product }}
        tier: {{ .Values.appName }}
    spec:
      initContainers:
        #### https://github.com/docker-library/postgres/issues/563
        - name: pgsql-data-permission-fix
          image: busybox
          command:
            - sh
            - -c
            - |
              chmod 700 {{ .Values.postgresqlDataDir }}
              chown 70:70 {{ .Values.postgresqlDataDir }}
          securityContext:
            runAsUser: 0
          volumeMounts:
            - name: {{ .Values.appName }}-claim
              mountPath: {{ .Values.postgresqlDataDir }}
              subPath: pgdata
      volumes:
        - name: {{ .Values.appName }}-claim
          persistentVolumeClaim:
            claimName: {{ .Values.appName }}-{{ .Values.global.storage}}-claim
      containers:
        - image: "postgres:13-alpine"
          imagePullPolicy: {{ .Values.global.imagePullPolicy | default "IfNotPresent" }}
          name: {{ .Values.appName }}
          securityContext:
            runAsUser: 70
          env:
            - name: PGDATA
              value: {{ .Values.postgresqlDataDir }}
            - name: POSTGRES_USER
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.global.db.secret.name }}-root
                  key: dbsuperuser
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.global.db.secret.name }}-root
                  key: dbsuperuserpwd
            - name: POSTGRES_HOST_AUTH_METHOD
              value: "md5"
            - name: POSTGRES_INITDB_ARGS
              value: "--auth-host=md5"
          ports:
            - containerPort: 5432
              name: {{ .Values.appName }}
          volumeMounts:
            - name: {{ .Values.appName }}-claim
              mountPath: {{ .Values.postgresqlDataDir }}
                {{- if not  (eq .Values.global.db.internal false) }}
              subPath: pgdata
          livenessProbe:
            exec:
              command:
                - sh
                - -c
                - exec pg_isready -U "postgres" -h localhost
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          readinessProbe:
            exec:
              command:
                - sh
                - -c
                - exec pg_isready -U "postgres" -h localhost
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
                {{- end }}
          resources:
            limits:
              cpu: 1500m
              memory: 1500Mi
            requests:
              cpu: 300m
              memory: 400Mi
      volumes:
        - name: {{ .Values.appName }}-claim
          persistentVolumeClaim:
            claimName: {{ .Values.global.db.persistantVolumeClaimName }}
            readOnly: false
      {{- if not  (eq .Values.global.repotype "public") }}
      imagePullSecrets:
        - name: corezoid-secret
      {{- end }}
{{- end }}
