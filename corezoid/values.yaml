global:
  # second level domain only! / core domain (example: corezoid.com)
  domain: "dev-devops.corezoid.com"
  # subdomain / sitename - dev.mpo.corezoid.com (example: dev.mpo)
  subdomain: "corezoid-k8s-develop"

  # docker image registry
  imageRegistry: "hub.corezoid.com"
  #IfNotPresent | Always | Never
  imagePullPolicy: "Always"
  # If specified, use these secrets to access the images, this can be used on mCloud.
#   imagePullSecrets:
#     name: corezoid-secret
  repotype: "public"
  # repotype: "corezoid"
  product: "corezoid"
  centos8Repo: public-corezoid-centos8
  centos9Repo: public-corezoid-centos9
  useCentos8: true
  useCentos9: false

  deploymentStrategy:
    type: RollingUpdate

  imageInit:
    repository: hub.corezoid.com/hub.docker.com/library/alpine
    pullPolicy: IfNotPresent
    tag: "3.21"

#  timezone: "Asia/Baku"

  # Ingress annotations
  ingress:
    enabled: true
    tls:
      enabled: false
      secret:
        create: false
    className: "private-nginx"
    annotations:
      ingress.class: "private-nginx"
      nginx.ingress.kubernetes.io/proxy-body-size: "150m"
#      alb.ingress.kubernetes.io/scheme: internet-facing
#      alb.ingress.kubernetes.io/certificate-arn: arn:aws:acm:eu-west-1:305168114386:certificate/5fad3576-220b-4c69-ac85-e56b3fe684bd
#      alb.ingress.kubernetes.io/ssl-policy: ELBSecurityPolicy-TLS-1-2-Ext-2018-06
#      alb.ingress.kubernetes.io/listen-ports: '[{"HTTP": 80}, {"HTTPS":443}]'
#      alb.ingress.kubernetes.io/load-balancer-attributes: "routing.http2.enabled=false"

      # access restriction
      # alb.ingress.kubernetes.io/inbound-cidrs: 8.8.8.8/32, 1.1.1.1/32, 0.0.0.0/0
      # for creating route53 record-set
      # external-dns.alpha.kubernetes.io/hostname: {{ .Values.global.subdomain}}.{{ .Values.global.domain }}

  ###########################################
  ######## Settings for filesystems #########
  # Define global storage class: efs / nfs / manual (manual storage should support accessModes: - ReadWriteMany)

  storage: nfs
  # Define global storageClass name
  storageClassName: "corezoid-storage-class-default-develop"
  ######## Settings AWS EFS filesystem   ########
  efs:
    awsRegion: "eu-west-1"
    efsFileSystemId: "fs-00b8a4b9489e767a1"
    ## set true if you choose storage: efs
    enabled: false
    affinity: {}
    tolerations: {}
  ######## Settings NFS filesystem   ########
  nfs:
    ## set true if you choose storage: nfs
    enabled: true
    affinity: {}
#     affinity:
#       nodeAffinity:
#         requiredDuringSchedulingIgnoredDuringExecution:
#           nodeSelectorTerms:
#             - matchExpressions:
#                 - key: app
#                   operator: In
#                   values:
#                     - 'corezoid-develop'

  ##############################################
  ######## NetworkPolicy########################
  networkPolicy:
    enabled: false
    labelsSelector:
      ingress:
        - from:
          - namespaceSelector:
              matchLabels:
                # Selector for ingress namespace
                name: alb-ingress-nginx-internal
          - podSelector:
              matchLabels:
                # Selector for ingress deployments
                app.kubernetes.io/name: ingress-nginx
      monitoring:
        - from:
            # Selector for prometheus namespace
            - namespaceSelector:
                matchLabels:
                  name: monitoring
            # Selector for prometheus deployments
            - podSelector:
                matchLabels:
                  release: prometheus-stack
  ########  Settings for stateful services  ########

  #######  PostgreSQL  ########
  ## Supported version PostgreSQL-15.*
  ## for RDS minimum instance - db.t4g.large / master user set "postgres"
  db:
    image: "hub.corezoid.com/public/postgres-postgis:15-alpine3.21-1"
    imagePullPolicy: "IfNotPresent"
    # if internal true - create and use internal postgres container
    # if internal false - enable external db, like aws rds
    internal: true
    # if true external host will be used for foreign data wrapper server creation
    # if false localhost will be used
    fdw_use_external_host: false
    ## secret configuration for postgresql
    ## pvc name
    persistantVolumeClaimName: "postgresql-pvc-develop"
    secret:
      ## true - secret will be created automaticaly with provided values
      ## false - secret should be created manualy
      create: true
      ## secret name
      name: "postgresql-secret"
      ## for init db and roles dbsuperuser and dbuser cannot be changed (because used as plain text in sql)
      dbsuperuser: "postgres"
      ## password - for dbsuperuser
      dbsuperuserpwd: "dGt41jU11!RBespOr"
      data:
        # dbhost: "10.68.49.188"
        dbhost: "pg-postgresql"
        dbport: "5432"
        dbuser: "dbuser"
        dbpwd: "kjnlqefgsfdgslqmlfq"
        dbuser_fdw: "fdw_user"
        dbpwd_fdw: "fdw_user_passwd123"

    ###### ATENTION! shards_count and shards cant be changed after first init!!!! ####
    # be careful in defining this variable
    # count of shards created in psql, if unset, default - 10
    shards_count: 10
    # count of shards created in psql, if unset, default - 10 - in array format
    shards: ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9"]
    affinity: {}
#     affinity:
#       nodeAffinity:
#         requiredDuringSchedulingIgnoredDuringExecution:
#           nodeSelectorTerms:
#             - matchExpressions:
#                 - key: app
#                   operator: In
#                   values:
#                     - 'corezoid-develop'
    tolerations: {}
    # set false to disable if you don't want to use PGBouncer recommended - true
    bouncer: true
    bouncer_image:
      registry: hub.corezoid.com
      repository: public/pgbouncer
      tag: 1.23.1-alpine3.21-1
    bouncer_exporterImage:
      registry: hub.corezoid.com
      repository: public/prometheus-pgbouncer-exporter
      tag: 2.1.1-python3.7.17-alpine3.18
    bouncer_minReplicas: "2"
    bouncer_maxReplicas: "6"
    bouncer_resources:
      limits:
        cpu: "500m"
        memory: "500Mi"
      requests:
        cpu: "500m"
        memory: "500Mi"
    bouncer_affinity: {}
#     bouncer_affinity:
#       nodeAffinity:
#         requiredDuringSchedulingIgnoredDuringExecution:
#           nodeSelectorTerms:
#             - matchExpressions:
#                 - key: app
#                   operator: In
#                   values:
#                     - 'corezoid-develop'
    bouncer_tolerations: {}
    # Maximum number of client connections allowed.
    maxclientconn: "100000"
    # How many server connections to allow per user/database pair. Can be overridden in the per-database configuration.
    default_pool_size: "50"
    # Maximum number of client connections allowed
    maxDBConnections: "1000"
    # Do not allow more than this many server connections per user (regardless of database)
    maxUserConnections: "1000"
    # How many additional connections to allow to a pool
    reserve_pool_size: "5"
    # If a client has not been serviced in this many seconds, use additional connections from the reserve pool
    reservePoolTimeout: "2"
    # The pooler will close an unused server connection that has been connected longer than this
    serverLifetime: "1200"
    # If a server connection has been idle more than this many seconds it will be dropped
    serverIdleTimeout: "15"
    # If connection and login wonâ€™t finish in this amount of time, the connection will be closed.
    serverConnectTimeout: "15"
    # Pgbouncer -> PostgreSQL connection mode. TLS connection is always requested first from PostgreSQL. If refused, the connection will be established over plain TCP. Server certificate is not validated. http://www.pgbouncer.org/config.html
    serverTlsSslmode: "disable"  # only "require" (default), "verify-full", "verify-ca", and "disable" supported
    serverTlsSslenabled: false
    # Server is released back to pool after transaction finishes. default: session, see man https://wiki.postgresql.org/wiki/PgBouncer
    # transaction | session
    default_pool_mode: transaction
    # PgBouncer verbosity level (0-3). Controls the VERBOSE parameter for pgbouncer logging.
    # pgbouncer_log_level: "0"
    rotation:
      ## enabled: true or false
      enabled: true
      # tasks_archive table cleanup period in crontab format
      # minute hour day month dayofweek
      scheduleArchive: "0 0 1 * *"
      scheduleHistory: "0 0 1 * *"


  ## NO CLUSTER Mode!
  redis:
    # if internal true - create and use internal k8s redis container
    # if internal false - enable external redis, like aws elasticache
    internal: true
    image:
      registry: hub.corezoid.com
      repository: /public/redis
      tag: 7.2.4
    # tls true only for aws elasticache
    tls:
      enabled: false
    ## pvc name if it already exist or was created manualy
    persistantVolumeClaimName: "redis-pvc-develop"
    ## Optional: Override Redis image settings globally
    ## If not specified, values from charts/redis/values.yaml will be used
    # image:
    #   registry: "custom-registry.com"
    #   repository: "/custom-redis"
    #   tag: "6.2.0"
    ## secret configuration for redis
    sentinel:
      enable: false
      master_name: "mymaster"
    secret:
      ## true - secret will be created automatically with provided values
      ## false - secret should be created manually
      create: true
      name: "redis-secret"
      # you can specify different servers for redis for counters, cache and timers  - or specify the same server in variables
      data:
        # host: "10.68.49.188"
        host: "redis-master"
        port: "6379"
        password: ""
        # redis for cache (defaults to above redis values if empty ^)
        # host_cache: "10.68.49.188"
        # port_cache: "6380"
        host_cache: ""
        port_cache: ""
        password_cache: ""
        # redis for timers (defaults to above redis values if empty ^)
        # host_timers: "10.68.49.188"
        # port_timers: "6381"
        host_timers: ""
        port_timers: ""
        password_timers: ""
#     redistype: elasticache  # only to AWS elasticache redis
    affinity: {}
#     affinity:
#       nodeAffinity:
#         requiredDuringSchedulingIgnoredDuringExecution:
#           nodeSelectorTerms:
#             - matchExpressions:
#                 - key: app
#                   operator: In
#                   values:
#                     - 'corezoid-develop'
    tolerations: {}

  #######  Elasticsearch  ########
  ## Supported version 8.6.0
  elasticsearch:
    tag: "8.19.3"
    # if internal true - create and use internal elasticsearch container
    # if internal false - enable external elasticsearch, like aws elasticsearch service
    internal: true
    ## secret configuration for elasticsearch
    secret:
      ## true - secret will be created automaticaly with provided values
      ## false - secret should be created manualy
      create: true
      name: "elasticsearch-secret"
      data:
        # host: "10.68.49.188"
        host: "elasticsearch-service"
        ## be careful with port - in internal install used 9200, in aws uses 443
        port: "9200"
        schema: "http"
#        port: "443"
#        schema: "https"
      # Optional
      auth_enabled: false
      auth_data:
        username: ""
        password: ""
    affinity: {}
#     affinity:
#       nodeAffinity:
#         requiredDuringSchedulingIgnoredDuringExecution:
#           nodeSelectorTerms:
#             - matchExpressions:
#                 - key: app
#                   operator: In
#                   values:
#                     - 'corezoid-develop'
    tolerations: {}

  #######  RabbitMQ  ########
  ## Supported version  3.9.*
  mq:
    # if internal true - create and use internal rmq container
    # if internal false - enable external rmq (on aws ec2 instances as example)
    internal: true
    # tls true only for external rabbitmq
    tls:
      enabled: false
    ## secret configuration for rabbitmq
    secret:
      ## true - secret will be created automatically with provided values
      ## false - secret should be created manually
      create: true
      name: "rabbitmq-secret"
      data:
        # host: "10.68.49.188"
        host: "rabbit-service"
        port: "5672"
        vhost: "/conveyor"
        username: "rabbituser"
        password: "vefgemknvlwkem"
    # vm_memory_high_watermark.relative
    memoryHighWatermark: 0.3
    affinity: {}
#     affinity:
#       nodeAffinity:
#         requiredDuringSchedulingIgnoredDuringExecution:
#           nodeSelectorTerms:
#             - matchExpressions:
#                 - key: app
#                   operator: In
#                   values:
#                     - 'corezoid-develop'
    tolerations: {}

  ########  Settings for Corezoid services  ########
  use_limits_from_server: true
  ## Settings for API Corezoid
  capi:
    minReplicas: 2
    maxReplicas: 4
    resources:
      limits:
        cpu: 600m
        memory: 2Gi
      requests:
        cpu: 500m
        memory: 1500Mi
    ## Allows you to see the api keys of other users in one company
    share_api_keys_in_company: "false"
    ## Init password for admin@corezoid.loc
    init_admin_password: "Q10J-H(QY95jf3zuU463N"
    ## restricting user registration only within the domains specified below if enabled
    registration_restriction:
      enable: false
      allowed_domains:
        - "gmail.com"
        - "yahoo.com"
    check_2fa: false
    # Enable cookie secure for api
    secure: true
    ## pvc name if it already exist or was created manualy
    persistantVolumeClaimName: "capi-pvc-develop"
    ## true if pvc for capi should be created automaticaly
    ## false if you already have pvc
    persistantVolumeClaimCreate: true
    # Auth provider
    auth_providers_enable: true            # Default Corezoid auth (login and password)
    auth_providers_saml_enable: false      # SAML Provider
    capi_saml_secret_name: "capi-saml-secret"

    # User requests per second limits
    user_limits_interface: "120"  # other requests (anything that is not create/modify task)
    user_limits_max_user_rate: "100" # RPS in the environment

#     copilot_sdk:
#       enabled: true
#       private_key:
#       client_email: ""
#       token_uri: ""
#       grant_type: ""
#       path_completion: ""
#       path_explanation: ""

    #Password hash algorithm
#    password_salt_algo: sha512

    # SAML SSO configuration for multiple IdP
    saml_idp:
#      # Sample SAML configuration for login page button SSO
#      sso:
#        name: "Google SAML"
#        front_button_show: true
#        login_path: "/auth2/saml/sso"
#        icon_url: "https://upload.wikimedia.org/wikipedia/commons/archive/5/53/20210618182605%21Google_%22G%22_Logo.svg"
#        idp_signs_envelopes: false
#        idp_signs_assertions: true
#        idp_signs_metadata: false
#        sp_consume_url: "/auth2/saml/sso/return"
#        # IdP SAML Metadata file content for SSO authentication
#        auth_metadata_content: ""
      # Sample SAML Support configuration for /support endpoint
      support:
        name: "Google SAML2"
        front_button_show: true
        login_path: "/auth2/saml/corezoid-support"
        icon_url: "https://upload.wikimedia.org/wikipedia/commons/archive/5/53/20210618182605%21Google_%22G%22_Logo.svg"
        idp_signs_envelopes: false
        idp_signs_assertions: false
        idp_signs_metadata: false
        sp_entity_id: "support"
        sp_consume_url: "/auth2/saml/corezoid-support/return"
        # IdP SAML Metadata file content for SSO authentication
        auth_metadata_content:
          <?xml version="1.0" encoding="UTF-8"?>
          <EntityDescriptor
          .................
          </EntityDescriptor>

    # Captcha when login in UI enable/disable
    capi_front_captcha_disabled: true
    # after fail  login_attempts show capcha or block ( can choose in superadmin )
    login_attempts: "2"
    #captcha_provider - recaptcha or hcaptcha, default recaptcha
    captcha_provider: "recaptcha"
    captcha_verify_url: "https://www.google.com/recaptcha/api/siteverify"
    secret:
      ## true - secret will be created automatically with provided values
      ## false - secret should be created manually
      create: true
      name: "capi-secret"
      data:
        # Key for captcha when login in UI
        capi_front_captcha_key: ""
        # Secret for captcha
        capi_backend_captcha_key: ""
    # max req/sec of create|modify|delete for conv|folder|dashboard in 1 sec
    max_reqs_limit: 50000
    # merchant_api settings
    merchant_api:
      skip_otp: true
    # cookie expire time in sec (default 900)
    cookie_expr_time: 7200
    # For create company. We recommend using corezoid_internal for the new installation, if the old installation then use only mapi
    companies_manager: "corezoid_internal"
    # If `fs` gets a license from a file, if `db` gets a license from a database. For new installation use only db
    licensepath: "db"
    ## User password strength policy
    password_policy:
      min_length: 10     # Min password length
      max_length: 35     # Max password length
      lowercase: true    # [a-z]
      uppercase: true    # [A-Z]
      number: true       # [0-9]
      special: true      # [\\!"#$%&'()*+,-./:;<=>?@^_`{|}~\[\]]
    ## Setting for configure frontend
    front_setting:
      # documentation (navigate by clicking on DOCS link)
      doc_host: "doc.corezoid.com"
      doc_index: "/"
      ui:
        # enabled Market button
        market: false
        # button Create -> Bot platform
        bot_platform: false
        # enabled merge by default
        features: true
        # billing button display
        billing: false
        # display of the git_call button
        git_call: false
        # set default company name
        default_company: "My Corezoid"
        # Tab name
        tab_name: "Corezoid"
        # disable or enable logo on main page
        disabled_auth_logo: false
        # colors
        color_main: "#0791e5"
        color_logo: "#0791e5"
        color_logo_hover: "#056cab"
      # widgets configuration (optional)
      # widgets:
      #   simulator_widget_domain: "SIMULATOR_WIDGET_DOMAIN"
      #   actor_id: "ACTOR_ID"
      #   workspace_whitelist: "WORKSPACE_WHITELIST"
    ldap_server: "ldap.middleware.loc"
    ldap_port: "389"
    ldap_base: "ou=people,o=middleware"
    ldap_filter: "uid"
    # then this param is true, bind_user_name, bind_user_pass should be filled. if it's false it is not necessary
    ldap_first_bind_user: true
    ldap_bind_user_name: "uid=ldap,ou=people,o=middleware"
    ldap_bind_user_pass: ""
    ldap_user_nick_entry: "cn"
    ldap_tls: false
    # max task size for process conv
    max_task_size_for_process_conv: "1048576"
    # max task size for state diagramm conv
    max_task_size_for_st_diagramm_conv: "1048576"
    logic_settings:
      # max allowed threads for api logic
      api_max_thread: 50000
      sender_max_threads: 25
      timer_default: 1 # 30
    # clean trash config
    scraper:
      scrap_interval: "1"
      ttl: "30"
    affinity: {}
#     affinity:
#       nodeAffinity:
#         requiredDuringSchedulingIgnoredDuringExecution:
#           nodeSelectorTerms:
#             - matchExpressions:
#                 - key: app
#                   operator: In
#                   values:
#                     - 'corezoid-develop'
    tolerations: {}

  ########  Settings for services  ########

  # http-worker
  http:
    minReplicas: 2
    maxReplicas: 4
    resources:
      limits:
        cpu: 1000m
        memory: 1000Mi
      requests:
        cpu: 700m
        memory: 500Mi
    max_keep_alive_connections_len: "0"
    max_http_resp_size: "5242880"
    blocked_domains:
      - "169.254.169.254"
      - "mail.ru"
    tune:
      http_consumer_queues_count: 8
      ## The specified number of tcp connections will be created for each queue
      http_consumer_connections_per_queue: 4
      ## Virtual connections for one connections_per_queue
      http_consumer_channels_per_connection: 4
      ## The number of queues within the channel
      http_consumer_messages_prefetch_size_per_channel: 10
      consumer_settings_messages_prefetch_size_per_channel: 50
      ## The number of queues within the channel
      consumer_response_prefetch_size_per_channel: 50
    ## http-worker advanced logging settings
#     http_worker_log:
#       info:
#         status: "on"
#         headers: "on"
#         body: "on"
#       error:
#         status: "on"
#         headers: "off"
#         body: "off"
    affinity: {}
#     affinity:
#       nodeAffinity:
#         requiredDuringSchedulingIgnoredDuringExecution:
#           nodeSelectorTerms:
#             - matchExpressions:
#                 - key: app
#                   operator: In
#                   values:
#                     - 'corezoid-develop'
    tolerations: {}

  # usercode
  usercode:
    minReplicas: 2
    maxReplicas: 4
    # application resources limits and requests
    resources:
      limits:
        cpu: 2
        memory: 1000Mi
      requests:
        cpu: 1
        memory: 1000Mi
    # max time for each execution of code, kill process after this time
    max_exec_code_time: 1000
    affinity: {}
#     affinity:
#       nodeAffinity:
#         requiredDuringSchedulingIgnoredDuringExecution:
#           nodeSelectorTerms:
#             - matchExpressions:
#                 - key: app
#                   operator: In
#                   values:
#                     - 'corezoid-develop'
    tolerations: {}

  # conveyor-worker
  worker:
    minReplicas: 2
    maxReplicas: 4
    # application resources limits and requests
    resources:
      limits:
        cpu: 1500m
        memory: 1500M
      requests:
        cpu: 1
        memory: 500M
    write_data_to_history: false
    worker_write_history_task: true
    affinity: {}
#     affinity:
#       nodeAffinity:
#         requiredDuringSchedulingIgnoredDuringExecution:
#           nodeSelectorTerms:
#             - matchExpressions:
#                 - key: app
#                   operator: In
#                   values:
#                     - 'corezoid-develop'
    tolerations: {}

  # mult
  mult:
    minReplicas: 2
    maxReplicas: 4
    ## pvc name if it already exist or was created manualy
    persistantVolumeClaimName: "mult-pvc-develop"
    ## true if pvc for mult should be created automaticaly
    ## false if you already have pvc
    persistantVolumeClaimCreate: true
    persistantVolumeClaimSize: 5Gi
    # Support for explicit storage scheduler (eg: Stork)
    schedulerName: ""
    # application resources limits and requests
    resources:
      limits:
        cpu: 1000m
        memory: 1000Mi
      requests:
        cpu: 1
        memory: 500Mi
    affinity: {}
#     affinity:
#       nodeAffinity:
#         requiredDuringSchedulingIgnoredDuringExecution:
#           nodeSelectorTerms:
#             - matchExpressions:
#                 - key: app
#                   operator: In
#                   values:
#                     - 'corezoid-develop'
    tolerations: {}

  # webadm
  webadm:
    minReplicas: 1
    resources:
      limits:
        cpu: 200m
        memory: 500Mi
      requests:
        cpu: 200m
        memory: 500Mi
    affinity: {}
#     affinity:
#       nodeAffinity:
#         requiredDuringSchedulingIgnoredDuringExecution:
#           nodeSelectorTerms:
#             - matchExpressions:
#                 - key: app
#                   operator: In
#                   values:
#                     - 'corezoid-develop'
    tolerations: {}
  # additional allowed URLs that resources (such as JavaScript, CSS, Images, etc.) can be loaded from.
    content_security_policy:
      urls:
        # - https://doc.corezoid.com

  # syncapi
  syncapi:
    subdomain: "syncapi-k8s-develop"
    minReplicas: 2
    maxReplicas: 4
    # Max timeout to receive callbacks (milliseconds)
    callback_max_timeout: "60000"
    resources:
      limits:
        cpu: 1
        memory: 800Mi
      requests:
        cpu: 1
        memory: 500Mi
    affinity: {}
#     affinity:
#       nodeAffinity:
#         requiredDuringSchedulingIgnoredDuringExecution:
#           nodeSelectorTerms:
#             - matchExpressions:
#                 - key: app
#                   operator: In
#                   values:
#                     - 'corezoid-develop'
    tolerations: {}

  # merchant (deprecated)
  merchant:
    enabled: false

  # enigma global settings
  enigma:
    enabled: false
    encryption: false
    key_manager:
      aws_region: "eu-west-1"
      accessKeyId: "AKIAYQAMCNBUQ3PY5FO3"
      secretAccessKey: ""
      minReplicas: 1
      maxReplicas: 1
      # enigma private_key_id
      enigma_pk_id: ""
      resources:
        limits:
          cpu: 1000m
          memory: 1300Mi
        requests:
          cpu: 350m
          memory: 500Mi

  # single-account
  sa:
    enabled: false
    subDomain: "account-k8s-develop"
    google_client_id: ""
    google_client_secret: ""
    admin_bearer_token_secret: ungoh3mohM3valu6Zu1ohdiighie1EemoophaequohMoov

  # gitcall\dbcall | worker and rabbit settings
  gitcall:
    enabled: false
    mq_vhost: "/conveyor"
    dunder_mq_vhost: "/conveyor"

  dbcall:
    enabled: false

  # conf-agent-server
  conf_agent_server:
    minReplicas: 1
    maxReplicas: 4
    resources:
      limits:
        cpu: 700m
        memory: 700Mi
      requests:
        cpu: 700m
        memory: 700Mi
    affinity: {}
#     affinity:
#       nodeAffinity:
#         requiredDuringSchedulingIgnoredDuringExecution:
#           nodeSelectorTerms:
#             - matchExpressions:
#                 - key: app
#                   operator: In
#                   values:
#                     - 'corezoid-develop'
    tolerations: {}

  # web-superadm
  web_superadm:
    subdomain: "superadm-k8s-develop"
    minReplicas: 1
    resources:
      limits:
        cpu: 200m
        memory: 400Mi
      requests:
        cpu: 50m
        memory: 100Mi
    affinity: {}
#     affinity:
#       nodeAffinity:
#         requiredDuringSchedulingIgnoredDuringExecution:
#           nodeSelectorTerms:
#             - matchExpressions:
#                 - key: app
#                   operator: In
#                   values:
#                     - 'corezoid-develop'
    tolerations: {}

  limits:
    minReplicas: 1
    resources:
      limits:
        cpu: 500m
        memory: 500Mi
      requests:
        cpu: 350m
        memory: 300Mi
    affinity: {}
#     affinity:
#       nodeAffinity:
#         requiredDuringSchedulingIgnoredDuringExecution:
#           nodeSelectorTerms:
#             - matchExpressions:
#                 - key: app
#                   operator: In
#                   values:
#                     - 'corezoid-develop'
    tolerations: {}

  prometheus_metrics: false

  # global log level definition, info - default
  # available value info | warning | error | debug
  log_level: debug
  # allows store crushdumps and send to Telegram chat
  store_dumps:
    enabled: false
    dumps_dir: /var/dumps/
    http_endpoint: http://dump-service:3000/upload
    pvc_size: 10Gi
    notification_url: http://dump-service:3000/telegram
    # domain name for dumps web ui
    subdomain: ""
    #    dump-k8s-public
    # how to create login and password
    # https://www.web2generators.com/apache-tools/htpasswd-generator
    base_auth:
      - admin:$apr1$kdvn7ybj$Wp1TO4qCvlTpUu1x248Nb0
    # How to create telegram bot and get chat ID
    # https://core.telegram.org/bots
    # To get chat id replace {BOT_TOKEN} and open link in a browser
    # https://api.telegram.org/bot{BOT_TOKEN}/getUpdates
    # telegram token
    telegram_token: ""
    # telegram chat id
    telegram_group: ""
    rotate:
      # dumps rotate interval (hourly|daily|weekly|monthly|yearly)
      interval: daily
      # number of rotation
      copies: 7
    affinity: {}
#     affinity:
#       nodeAffinity:
#         requiredDuringSchedulingIgnoredDuringExecution:
#           nodeSelectorTerms:
#             - matchExpressions:
#                 - key: app
#                   operator: In
#                   values:
#                     - 'corezoid-develop'
    tolerations: {}
